
Encoder-CMSIS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000458  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000518  08000520  00010520  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000518  08000518  00010520  2**0
                  CONTENTS
  4 .ARM          00000000  08000518  08000518  00010520  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000518  08000520  00010520  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000518  08000518  00010518  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800051c  0800051c  0001051c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010520  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  08000520  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000100  20000020  08000520  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00010520  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000813  00000000  00000000  00010548  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000002ae  00000000  00000000  00010d5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000090  00000000  00000000  00011010  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000068  00000000  00000000  000110a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00008385  00000000  00000000  00011108  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000009e6  00000000  00000000  0001948d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0002bb6b  00000000  00000000  00019e73  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000459de  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000118  00000000  00000000  00045a5c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000000 	.word	0x20000000
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08000500 	.word	0x08000500

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000004 	.word	0x20000004
 8000104:	08000500 	.word	0x08000500

08000108 <SystemInit>:
  *         Initialize the default HSI clock source, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000108:	b580      	push	{r7, lr}
 800010a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 800010c:	4b1a      	ldr	r3, [pc, #104]	; (8000178 <SystemInit+0x70>)
 800010e:	681a      	ldr	r2, [r3, #0]
 8000110:	4b19      	ldr	r3, [pc, #100]	; (8000178 <SystemInit+0x70>)
 8000112:	2101      	movs	r1, #1
 8000114:	430a      	orrs	r2, r1
 8000116:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8000118:	4b17      	ldr	r3, [pc, #92]	; (8000178 <SystemInit+0x70>)
 800011a:	685a      	ldr	r2, [r3, #4]
 800011c:	4b16      	ldr	r3, [pc, #88]	; (8000178 <SystemInit+0x70>)
 800011e:	4917      	ldr	r1, [pc, #92]	; (800017c <SystemInit+0x74>)
 8000120:	400a      	ands	r2, r1
 8000122:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 8000124:	4b14      	ldr	r3, [pc, #80]	; (8000178 <SystemInit+0x70>)
 8000126:	681a      	ldr	r2, [r3, #0]
 8000128:	4b13      	ldr	r3, [pc, #76]	; (8000178 <SystemInit+0x70>)
 800012a:	4915      	ldr	r1, [pc, #84]	; (8000180 <SystemInit+0x78>)
 800012c:	400a      	ands	r2, r1
 800012e:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8000130:	4b11      	ldr	r3, [pc, #68]	; (8000178 <SystemInit+0x70>)
 8000132:	681a      	ldr	r2, [r3, #0]
 8000134:	4b10      	ldr	r3, [pc, #64]	; (8000178 <SystemInit+0x70>)
 8000136:	4913      	ldr	r1, [pc, #76]	; (8000184 <SystemInit+0x7c>)
 8000138:	400a      	ands	r2, r1
 800013a:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 800013c:	4b0e      	ldr	r3, [pc, #56]	; (8000178 <SystemInit+0x70>)
 800013e:	685a      	ldr	r2, [r3, #4]
 8000140:	4b0d      	ldr	r3, [pc, #52]	; (8000178 <SystemInit+0x70>)
 8000142:	4911      	ldr	r1, [pc, #68]	; (8000188 <SystemInit+0x80>)
 8000144:	400a      	ands	r2, r1
 8000146:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8000148:	4b0b      	ldr	r3, [pc, #44]	; (8000178 <SystemInit+0x70>)
 800014a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800014c:	4b0a      	ldr	r3, [pc, #40]	; (8000178 <SystemInit+0x70>)
 800014e:	210f      	movs	r1, #15
 8000150:	438a      	bics	r2, r1
 8000152:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEACU;
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
 8000154:	4b08      	ldr	r3, [pc, #32]	; (8000178 <SystemInit+0x70>)
 8000156:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000158:	4b07      	ldr	r3, [pc, #28]	; (8000178 <SystemInit+0x70>)
 800015a:	490c      	ldr	r1, [pc, #48]	; (800018c <SystemInit+0x84>)
 800015c:	400a      	ands	r2, r1
 800015e:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 8000160:	4b05      	ldr	r3, [pc, #20]	; (8000178 <SystemInit+0x70>)
 8000162:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000164:	4b04      	ldr	r3, [pc, #16]	; (8000178 <SystemInit+0x70>)
 8000166:	2101      	movs	r1, #1
 8000168:	438a      	bics	r2, r1
 800016a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 800016c:	4b02      	ldr	r3, [pc, #8]	; (8000178 <SystemInit+0x70>)
 800016e:	2200      	movs	r2, #0
 8000170:	609a      	str	r2, [r3, #8]

}
 8000172:	46c0      	nop			; (mov r8, r8)
 8000174:	46bd      	mov	sp, r7
 8000176:	bd80      	pop	{r7, pc}
 8000178:	40021000 	.word	0x40021000
 800017c:	08ffb80c 	.word	0x08ffb80c
 8000180:	fef6ffff 	.word	0xfef6ffff
 8000184:	fffbffff 	.word	0xfffbffff
 8000188:	ffc0ffff 	.word	0xffc0ffff
 800018c:	fffffeec 	.word	0xfffffeec

08000190 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000190:	b580      	push	{r7, lr}
 8000192:	b082      	sub	sp, #8
 8000194:	af00      	add	r7, sp, #0
 8000196:	0002      	movs	r2, r0
 8000198:	1dfb      	adds	r3, r7, #7
 800019a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800019c:	1dfb      	adds	r3, r7, #7
 800019e:	781b      	ldrb	r3, [r3, #0]
 80001a0:	2b7f      	cmp	r3, #127	; 0x7f
 80001a2:	d809      	bhi.n	80001b8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001a4:	1dfb      	adds	r3, r7, #7
 80001a6:	781b      	ldrb	r3, [r3, #0]
 80001a8:	001a      	movs	r2, r3
 80001aa:	231f      	movs	r3, #31
 80001ac:	401a      	ands	r2, r3
 80001ae:	4b04      	ldr	r3, [pc, #16]	; (80001c0 <__NVIC_EnableIRQ+0x30>)
 80001b0:	2101      	movs	r1, #1
 80001b2:	4091      	lsls	r1, r2
 80001b4:	000a      	movs	r2, r1
 80001b6:	601a      	str	r2, [r3, #0]
  }
}
 80001b8:	46c0      	nop			; (mov r8, r8)
 80001ba:	46bd      	mov	sp, r7
 80001bc:	b002      	add	sp, #8
 80001be:	bd80      	pop	{r7, pc}
 80001c0:	e000e100 	.word	0xe000e100

080001c4 <main>:
/* Function prototypes */
void Enc_Trig_Int(void);
void GPIO_Initialization(void);

int main(void)
{
 80001c4:	b580      	push	{r7, lr}
 80001c6:	af00      	add	r7, sp, #0

	GPIO_Initialization();
 80001c8:	f000 f8de 	bl	8000388 <GPIO_Initialization>
	 */

	/****** GPIO Initialization ******/

	/* GPIOA Clock */
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 80001cc:	4b56      	ldr	r3, [pc, #344]	; (8000328 <main+0x164>)
 80001ce:	695a      	ldr	r2, [r3, #20]
 80001d0:	4b55      	ldr	r3, [pc, #340]	; (8000328 <main+0x164>)
 80001d2:	2180      	movs	r1, #128	; 0x80
 80001d4:	0289      	lsls	r1, r1, #10
 80001d6:	430a      	orrs	r2, r1
 80001d8:	615a      	str	r2, [r3, #20]

	/* 10: Alternate function mode */
	GPIOA->MODER &= ~GPIO_MODER_MODER6_0;
 80001da:	2390      	movs	r3, #144	; 0x90
 80001dc:	05db      	lsls	r3, r3, #23
 80001de:	681a      	ldr	r2, [r3, #0]
 80001e0:	2390      	movs	r3, #144	; 0x90
 80001e2:	05db      	lsls	r3, r3, #23
 80001e4:	4951      	ldr	r1, [pc, #324]	; (800032c <main+0x168>)
 80001e6:	400a      	ands	r2, r1
 80001e8:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= GPIO_MODER_MODER6_1;
 80001ea:	2390      	movs	r3, #144	; 0x90
 80001ec:	05db      	lsls	r3, r3, #23
 80001ee:	681a      	ldr	r2, [r3, #0]
 80001f0:	2390      	movs	r3, #144	; 0x90
 80001f2:	05db      	lsls	r3, r3, #23
 80001f4:	2180      	movs	r1, #128	; 0x80
 80001f6:	0189      	lsls	r1, r1, #6
 80001f8:	430a      	orrs	r2, r1
 80001fa:	601a      	str	r2, [r3, #0]

	/* 00: No pull-up, pull-down */
	GPIOA->PUPDR &= GPIO_PUPDR_PUPDR6_0;
 80001fc:	2390      	movs	r3, #144	; 0x90
 80001fe:	05db      	lsls	r3, r3, #23
 8000200:	68d9      	ldr	r1, [r3, #12]
 8000202:	2390      	movs	r3, #144	; 0x90
 8000204:	05db      	lsls	r3, r3, #23
 8000206:	2280      	movs	r2, #128	; 0x80
 8000208:	0152      	lsls	r2, r2, #5
 800020a:	400a      	ands	r2, r1
 800020c:	60da      	str	r2, [r3, #12]
	GPIOA->PUPDR &= GPIO_PUPDR_PUPDR6_1;
 800020e:	2390      	movs	r3, #144	; 0x90
 8000210:	05db      	lsls	r3, r3, #23
 8000212:	68d9      	ldr	r1, [r3, #12]
 8000214:	2390      	movs	r3, #144	; 0x90
 8000216:	05db      	lsls	r3, r3, #23
 8000218:	2280      	movs	r2, #128	; 0x80
 800021a:	0192      	lsls	r2, r2, #6
 800021c:	400a      	ands	r2, r1
 800021e:	60da      	str	r2, [r3, #12]

	/* 0001: AF1 */
	GPIOA->AFR[0] |= (1UL << GPIO_AFRL_AFSEL6_Pos);
 8000220:	2390      	movs	r3, #144	; 0x90
 8000222:	05db      	lsls	r3, r3, #23
 8000224:	6a1a      	ldr	r2, [r3, #32]
 8000226:	2390      	movs	r3, #144	; 0x90
 8000228:	05db      	lsls	r3, r3, #23
 800022a:	2180      	movs	r1, #128	; 0x80
 800022c:	0449      	lsls	r1, r1, #17
 800022e:	430a      	orrs	r2, r1
 8000230:	621a      	str	r2, [r3, #32]


	/* 10: Alternate function mode */
	GPIOA->MODER &= ~GPIO_MODER_MODER7_0;
 8000232:	2390      	movs	r3, #144	; 0x90
 8000234:	05db      	lsls	r3, r3, #23
 8000236:	681a      	ldr	r2, [r3, #0]
 8000238:	2390      	movs	r3, #144	; 0x90
 800023a:	05db      	lsls	r3, r3, #23
 800023c:	493c      	ldr	r1, [pc, #240]	; (8000330 <main+0x16c>)
 800023e:	400a      	ands	r2, r1
 8000240:	601a      	str	r2, [r3, #0]
	GPIOA->MODER |= GPIO_MODER_MODER7_1;
 8000242:	2390      	movs	r3, #144	; 0x90
 8000244:	05db      	lsls	r3, r3, #23
 8000246:	681a      	ldr	r2, [r3, #0]
 8000248:	2390      	movs	r3, #144	; 0x90
 800024a:	05db      	lsls	r3, r3, #23
 800024c:	2180      	movs	r1, #128	; 0x80
 800024e:	0209      	lsls	r1, r1, #8
 8000250:	430a      	orrs	r2, r1
 8000252:	601a      	str	r2, [r3, #0]

	/* 00: No pull-up, pull-down */
	GPIOA->PUPDR &= GPIO_PUPDR_PUPDR7_0;
 8000254:	2390      	movs	r3, #144	; 0x90
 8000256:	05db      	lsls	r3, r3, #23
 8000258:	68d9      	ldr	r1, [r3, #12]
 800025a:	2390      	movs	r3, #144	; 0x90
 800025c:	05db      	lsls	r3, r3, #23
 800025e:	2280      	movs	r2, #128	; 0x80
 8000260:	01d2      	lsls	r2, r2, #7
 8000262:	400a      	ands	r2, r1
 8000264:	60da      	str	r2, [r3, #12]
	GPIOA->PUPDR &= GPIO_PUPDR_PUPDR7_1;
 8000266:	2390      	movs	r3, #144	; 0x90
 8000268:	05db      	lsls	r3, r3, #23
 800026a:	68d9      	ldr	r1, [r3, #12]
 800026c:	2390      	movs	r3, #144	; 0x90
 800026e:	05db      	lsls	r3, r3, #23
 8000270:	2280      	movs	r2, #128	; 0x80
 8000272:	0212      	lsls	r2, r2, #8
 8000274:	400a      	ands	r2, r1
 8000276:	60da      	str	r2, [r3, #12]

	/* 0001: AF1 */
	GPIOA->AFR[0] |= (1UL << GPIO_AFRL_AFSEL7_Pos);
 8000278:	2390      	movs	r3, #144	; 0x90
 800027a:	05db      	lsls	r3, r3, #23
 800027c:	6a1a      	ldr	r2, [r3, #32]
 800027e:	2390      	movs	r3, #144	; 0x90
 8000280:	05db      	lsls	r3, r3, #23
 8000282:	2180      	movs	r1, #128	; 0x80
 8000284:	0549      	lsls	r1, r1, #21
 8000286:	430a      	orrs	r2, r1
 8000288:	621a      	str	r2, [r3, #32]


	/* Encoder Initialization */

	/* TIM3 Clock */
	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 800028a:	4b27      	ldr	r3, [pc, #156]	; (8000328 <main+0x164>)
 800028c:	69da      	ldr	r2, [r3, #28]
 800028e:	4b26      	ldr	r3, [pc, #152]	; (8000328 <main+0x164>)
 8000290:	2102      	movs	r1, #2
 8000292:	430a      	orrs	r2, r1
 8000294:	61da      	str	r2, [r3, #28]

	/* 01: CC1 channel is configured as input, IC1 is mapped on TI1
	 * 01: CC2 channel is configured as input, IC2 is mapped on TI2 */
	TIM3->CCMR1 |= (TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0);
 8000296:	4b27      	ldr	r3, [pc, #156]	; (8000334 <main+0x170>)
 8000298:	699a      	ldr	r2, [r3, #24]
 800029a:	4b26      	ldr	r3, [pc, #152]	; (8000334 <main+0x170>)
 800029c:	2102      	movs	r1, #2
 800029e:	31ff      	adds	r1, #255	; 0xff
 80002a0:	430a      	orrs	r2, r1
 80002a2:	619a      	str	r2, [r3, #24]
	TIM3->CCMR1 &= ~(TIM_CCMR1_CC1S_1 | TIM_CCMR1_CC2S_1);
 80002a4:	4b23      	ldr	r3, [pc, #140]	; (8000334 <main+0x170>)
 80002a6:	699a      	ldr	r2, [r3, #24]
 80002a8:	4b22      	ldr	r3, [pc, #136]	; (8000334 <main+0x170>)
 80002aa:	4923      	ldr	r1, [pc, #140]	; (8000338 <main+0x174>)
 80002ac:	400a      	ands	r2, r1
 80002ae:	619a      	str	r2, [r3, #24]

	/* 00: noninverted/rising edge */
	TIM3->CCER &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80002b0:	4b20      	ldr	r3, [pc, #128]	; (8000334 <main+0x170>)
 80002b2:	6a1a      	ldr	r2, [r3, #32]
 80002b4:	4b1f      	ldr	r3, [pc, #124]	; (8000334 <main+0x170>)
 80002b6:	2122      	movs	r1, #34	; 0x22
 80002b8:	438a      	bics	r2, r1
 80002ba:	621a      	str	r2, [r3, #32]
	TIM3->CCER &= ~(TIM_CCER_CC2NP | TIM_CCER_CC2NP);
 80002bc:	4b1d      	ldr	r3, [pc, #116]	; (8000334 <main+0x170>)
 80002be:	6a1a      	ldr	r2, [r3, #32]
 80002c0:	4b1c      	ldr	r3, [pc, #112]	; (8000334 <main+0x170>)
 80002c2:	2180      	movs	r1, #128	; 0x80
 80002c4:	438a      	bics	r2, r1
 80002c6:	621a      	str	r2, [r3, #32]

	/* 001: Encoder mode 1 - Counter counts up/down on TI2FP1 edge depending on TI1FP2 level */
	TIM3->SMCR |= TIM_SMCR_SMS_0;
 80002c8:	4b1a      	ldr	r3, [pc, #104]	; (8000334 <main+0x170>)
 80002ca:	689a      	ldr	r2, [r3, #8]
 80002cc:	4b19      	ldr	r3, [pc, #100]	; (8000334 <main+0x170>)
 80002ce:	2101      	movs	r1, #1
 80002d0:	430a      	orrs	r2, r1
 80002d2:	609a      	str	r2, [r3, #8]
	TIM3->SMCR &= ~TIM_SMCR_SMS_1;
 80002d4:	4b17      	ldr	r3, [pc, #92]	; (8000334 <main+0x170>)
 80002d6:	689a      	ldr	r2, [r3, #8]
 80002d8:	4b16      	ldr	r3, [pc, #88]	; (8000334 <main+0x170>)
 80002da:	2102      	movs	r1, #2
 80002dc:	438a      	bics	r2, r1
 80002de:	609a      	str	r2, [r3, #8]
	TIM3->SMCR &= ~TIM_SMCR_SMS_2;
 80002e0:	4b14      	ldr	r3, [pc, #80]	; (8000334 <main+0x170>)
 80002e2:	689a      	ldr	r2, [r3, #8]
 80002e4:	4b13      	ldr	r3, [pc, #76]	; (8000334 <main+0x170>)
 80002e6:	2104      	movs	r1, #4
 80002e8:	438a      	bics	r2, r1
 80002ea:	609a      	str	r2, [r3, #8]

	/* 1111: fSAMPLING = fDTS / 32, N = 8 */
	TIM3->CCMR1 |= (TIM_CCMR1_IC1F_0 | TIM_CCMR1_IC1F_1 | TIM_CCMR1_IC1F_2 | TIM_CCMR1_IC1F_3);
 80002ec:	4b11      	ldr	r3, [pc, #68]	; (8000334 <main+0x170>)
 80002ee:	699a      	ldr	r2, [r3, #24]
 80002f0:	4b10      	ldr	r3, [pc, #64]	; (8000334 <main+0x170>)
 80002f2:	21f0      	movs	r1, #240	; 0xf0
 80002f4:	430a      	orrs	r2, r1
 80002f6:	619a      	str	r2, [r3, #24]
	TIM3->CCMR1 |= (TIM_CCMR1_IC2F_0 | TIM_CCMR1_IC2F_1 | TIM_CCMR1_IC2F_2 | TIM_CCMR1_IC2F_3);
 80002f8:	4b0e      	ldr	r3, [pc, #56]	; (8000334 <main+0x170>)
 80002fa:	699a      	ldr	r2, [r3, #24]
 80002fc:	4b0d      	ldr	r3, [pc, #52]	; (8000334 <main+0x170>)
 80002fe:	21f0      	movs	r1, #240	; 0xf0
 8000300:	0209      	lsls	r1, r1, #8
 8000302:	430a      	orrs	r2, r1
 8000304:	619a      	str	r2, [r3, #24]

	/* Auto-Reload Register (MAX counter number) */
	TIM3->ARR = 30;
 8000306:	4b0b      	ldr	r3, [pc, #44]	; (8000334 <main+0x170>)
 8000308:	221e      	movs	r2, #30
 800030a:	62da      	str	r2, [r3, #44]	; 0x2c

	Enc_Trig_Int();
 800030c:	f000 f818 	bl	8000340 <Enc_Trig_Int>

	/* 1: Counter enabled */
	TIM3->CR1 |= TIM_CR1_CEN;
 8000310:	4b08      	ldr	r3, [pc, #32]	; (8000334 <main+0x170>)
 8000312:	681a      	ldr	r2, [r3, #0]
 8000314:	4b07      	ldr	r3, [pc, #28]	; (8000334 <main+0x170>)
 8000316:	2101      	movs	r1, #1
 8000318:	430a      	orrs	r2, r1
 800031a:	601a      	str	r2, [r3, #0]


while(1){

	Enc_Counter = TIM3->CNT;
 800031c:	4b05      	ldr	r3, [pc, #20]	; (8000334 <main+0x170>)
 800031e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000320:	b2da      	uxtb	r2, r3
 8000322:	4b06      	ldr	r3, [pc, #24]	; (800033c <main+0x178>)
 8000324:	701a      	strb	r2, [r3, #0]
 8000326:	e7f9      	b.n	800031c <main+0x158>
 8000328:	40021000 	.word	0x40021000
 800032c:	ffffefff 	.word	0xffffefff
 8000330:	ffffbfff 	.word	0xffffbfff
 8000334:	40000400 	.word	0x40000400
 8000338:	fffffdfd 	.word	0xfffffdfd
 800033c:	2000001c 	.word	0x2000001c

08000340 <Enc_Trig_Int>:

	}
}

void Enc_Trig_Int(void){
 8000340:	b580      	push	{r7, lr}
 8000342:	af00      	add	r7, sp, #0

	/* Trigger Edge Detector */

	/* 0000: No filter, sampling is done at fDTS */
	TIM3->SMCR &= ~(TIM_SMCR_ETF);
 8000344:	4b0e      	ldr	r3, [pc, #56]	; (8000380 <Enc_Trig_Int+0x40>)
 8000346:	689a      	ldr	r2, [r3, #8]
 8000348:	4b0d      	ldr	r3, [pc, #52]	; (8000380 <Enc_Trig_Int+0x40>)
 800034a:	490e      	ldr	r1, [pc, #56]	; (8000384 <Enc_Trig_Int+0x44>)
 800034c:	400a      	ands	r2, r1
 800034e:	609a      	str	r2, [r3, #8]

	/* 100: TI1 Edge Detector (TI1F_ED) */
	TIM3->SMCR &= ~(TIM_SMCR_TS_0 | TIM_SMCR_TS_1);
 8000350:	4b0b      	ldr	r3, [pc, #44]	; (8000380 <Enc_Trig_Int+0x40>)
 8000352:	689a      	ldr	r2, [r3, #8]
 8000354:	4b0a      	ldr	r3, [pc, #40]	; (8000380 <Enc_Trig_Int+0x40>)
 8000356:	2130      	movs	r1, #48	; 0x30
 8000358:	438a      	bics	r2, r1
 800035a:	609a      	str	r2, [r3, #8]
	TIM3->SMCR |= TIM_SMCR_TS_2;
 800035c:	4b08      	ldr	r3, [pc, #32]	; (8000380 <Enc_Trig_Int+0x40>)
 800035e:	689a      	ldr	r2, [r3, #8]
 8000360:	4b07      	ldr	r3, [pc, #28]	; (8000380 <Enc_Trig_Int+0x40>)
 8000362:	2140      	movs	r1, #64	; 0x40
 8000364:	430a      	orrs	r2, r1
 8000366:	609a      	str	r2, [r3, #8]

	/* 1: Trigger interrupt enabled. */
	TIM3->DIER |= TIM_DIER_TIE;
 8000368:	4b05      	ldr	r3, [pc, #20]	; (8000380 <Enc_Trig_Int+0x40>)
 800036a:	68da      	ldr	r2, [r3, #12]
 800036c:	4b04      	ldr	r3, [pc, #16]	; (8000380 <Enc_Trig_Int+0x40>)
 800036e:	2140      	movs	r1, #64	; 0x40
 8000370:	430a      	orrs	r2, r1
 8000372:	60da      	str	r2, [r3, #12]

	NVIC_EnableIRQ(TIM3_IRQn);
 8000374:	2010      	movs	r0, #16
 8000376:	f7ff ff0b 	bl	8000190 <__NVIC_EnableIRQ>
}
 800037a:	46c0      	nop			; (mov r8, r8)
 800037c:	46bd      	mov	sp, r7
 800037e:	bd80      	pop	{r7, pc}
 8000380:	40000400 	.word	0x40000400
 8000384:	fffff0ff 	.word	0xfffff0ff

08000388 <GPIO_Initialization>:

void GPIO_Initialization(void){
 8000388:	b580      	push	{r7, lr}
 800038a:	af00      	add	r7, sp, #0

  RCC->AHBENR |= RCC_AHBENR_GPIOAEN; /* GPIOA Clock */
 800038c:	4b25      	ldr	r3, [pc, #148]	; (8000424 <GPIO_Initialization+0x9c>)
 800038e:	695a      	ldr	r2, [r3, #20]
 8000390:	4b24      	ldr	r3, [pc, #144]	; (8000424 <GPIO_Initialization+0x9c>)
 8000392:	2180      	movs	r1, #128	; 0x80
 8000394:	0289      	lsls	r1, r1, #10
 8000396:	430a      	orrs	r2, r1
 8000398:	615a      	str	r2, [r3, #20]

  GPIOA->MODER |= GPIO_MODER_MODER4_0; /* 01: General purpose output mode */
 800039a:	2390      	movs	r3, #144	; 0x90
 800039c:	05db      	lsls	r3, r3, #23
 800039e:	681a      	ldr	r2, [r3, #0]
 80003a0:	2390      	movs	r3, #144	; 0x90
 80003a2:	05db      	lsls	r3, r3, #23
 80003a4:	2180      	movs	r1, #128	; 0x80
 80003a6:	0049      	lsls	r1, r1, #1
 80003a8:	430a      	orrs	r2, r1
 80003aa:	601a      	str	r2, [r3, #0]
  GPIOA->MODER &= ~GPIO_MODER_MODER4_1;
 80003ac:	2390      	movs	r3, #144	; 0x90
 80003ae:	05db      	lsls	r3, r3, #23
 80003b0:	681a      	ldr	r2, [r3, #0]
 80003b2:	2390      	movs	r3, #144	; 0x90
 80003b4:	05db      	lsls	r3, r3, #23
 80003b6:	491c      	ldr	r1, [pc, #112]	; (8000428 <GPIO_Initialization+0xa0>)
 80003b8:	400a      	ands	r2, r1
 80003ba:	601a      	str	r2, [r3, #0]

  GPIOA->OTYPER &= ~GPIO_OTYPER_OT_4; /* 0: Output push-pull */
 80003bc:	2390      	movs	r3, #144	; 0x90
 80003be:	05db      	lsls	r3, r3, #23
 80003c0:	685a      	ldr	r2, [r3, #4]
 80003c2:	2390      	movs	r3, #144	; 0x90
 80003c4:	05db      	lsls	r3, r3, #23
 80003c6:	2110      	movs	r1, #16
 80003c8:	438a      	bics	r2, r1
 80003ca:	605a      	str	r2, [r3, #4]

  GPIOA->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR4_0; /* 01: Medium speed */
 80003cc:	2390      	movs	r3, #144	; 0x90
 80003ce:	05db      	lsls	r3, r3, #23
 80003d0:	689a      	ldr	r2, [r3, #8]
 80003d2:	2390      	movs	r3, #144	; 0x90
 80003d4:	05db      	lsls	r3, r3, #23
 80003d6:	2180      	movs	r1, #128	; 0x80
 80003d8:	0049      	lsls	r1, r1, #1
 80003da:	430a      	orrs	r2, r1
 80003dc:	609a      	str	r2, [r3, #8]
  GPIOA->OSPEEDR &= ~GPIO_OSPEEDER_OSPEEDR4_1;
 80003de:	2390      	movs	r3, #144	; 0x90
 80003e0:	05db      	lsls	r3, r3, #23
 80003e2:	689a      	ldr	r2, [r3, #8]
 80003e4:	2390      	movs	r3, #144	; 0x90
 80003e6:	05db      	lsls	r3, r3, #23
 80003e8:	490f      	ldr	r1, [pc, #60]	; (8000428 <GPIO_Initialization+0xa0>)
 80003ea:	400a      	ands	r2, r1
 80003ec:	609a      	str	r2, [r3, #8]

  GPIOA->PUPDR &= ~GPIO_PUPDR_PUPDR4_0; /* 00: No pull-up, pull-down */
 80003ee:	2390      	movs	r3, #144	; 0x90
 80003f0:	05db      	lsls	r3, r3, #23
 80003f2:	68da      	ldr	r2, [r3, #12]
 80003f4:	2390      	movs	r3, #144	; 0x90
 80003f6:	05db      	lsls	r3, r3, #23
 80003f8:	490c      	ldr	r1, [pc, #48]	; (800042c <GPIO_Initialization+0xa4>)
 80003fa:	400a      	ands	r2, r1
 80003fc:	60da      	str	r2, [r3, #12]
  GPIOA->PUPDR &= ~GPIO_PUPDR_PUPDR4_1;
 80003fe:	2390      	movs	r3, #144	; 0x90
 8000400:	05db      	lsls	r3, r3, #23
 8000402:	68da      	ldr	r2, [r3, #12]
 8000404:	2390      	movs	r3, #144	; 0x90
 8000406:	05db      	lsls	r3, r3, #23
 8000408:	4907      	ldr	r1, [pc, #28]	; (8000428 <GPIO_Initialization+0xa0>)
 800040a:	400a      	ands	r2, r1
 800040c:	60da      	str	r2, [r3, #12]

  GPIOA->BSRR |= GPIO_BSRR_BS_4; /* Low Level Out */
 800040e:	2390      	movs	r3, #144	; 0x90
 8000410:	05db      	lsls	r3, r3, #23
 8000412:	699a      	ldr	r2, [r3, #24]
 8000414:	2390      	movs	r3, #144	; 0x90
 8000416:	05db      	lsls	r3, r3, #23
 8000418:	2110      	movs	r1, #16
 800041a:	430a      	orrs	r2, r1
 800041c:	619a      	str	r2, [r3, #24]
}
 800041e:	46c0      	nop			; (mov r8, r8)
 8000420:	46bd      	mov	sp, r7
 8000422:	bd80      	pop	{r7, pc}
 8000424:	40021000 	.word	0x40021000
 8000428:	fffffdff 	.word	0xfffffdff
 800042c:	fffffeff 	.word	0xfffffeff

08000430 <TIM3_IRQHandler>:


void TIM3_IRQHandler(void){
 8000430:	b580      	push	{r7, lr}
 8000432:	af00      	add	r7, sp, #0

	if(TIM3->SR & TIM_SR_TIF){
 8000434:	4b0a      	ldr	r3, [pc, #40]	; (8000460 <TIM3_IRQHandler+0x30>)
 8000436:	691b      	ldr	r3, [r3, #16]
 8000438:	2240      	movs	r2, #64	; 0x40
 800043a:	4013      	ands	r3, r2
 800043c:	d00d      	beq.n	800045a <TIM3_IRQHandler+0x2a>

		/* Toggle LED (PA4 pin) */
		GPIOA->ODR ^= GPIO_ODR_4;
 800043e:	2390      	movs	r3, #144	; 0x90
 8000440:	05db      	lsls	r3, r3, #23
 8000442:	695a      	ldr	r2, [r3, #20]
 8000444:	2390      	movs	r3, #144	; 0x90
 8000446:	05db      	lsls	r3, r3, #23
 8000448:	2110      	movs	r1, #16
 800044a:	404a      	eors	r2, r1
 800044c:	615a      	str	r2, [r3, #20]

		/* Interrupt enabled */
		TIM3->SR &= ~TIM_SR_TIF;
 800044e:	4b04      	ldr	r3, [pc, #16]	; (8000460 <TIM3_IRQHandler+0x30>)
 8000450:	691a      	ldr	r2, [r3, #16]
 8000452:	4b03      	ldr	r3, [pc, #12]	; (8000460 <TIM3_IRQHandler+0x30>)
 8000454:	2140      	movs	r1, #64	; 0x40
 8000456:	438a      	bics	r2, r1
 8000458:	611a      	str	r2, [r3, #16]
	}

}
 800045a:	46c0      	nop			; (mov r8, r8)
 800045c:	46bd      	mov	sp, r7
 800045e:	bd80      	pop	{r7, pc}
 8000460:	40000400 	.word	0x40000400

08000464 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000464:	480d      	ldr	r0, [pc, #52]	; (800049c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000466:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000468:	f7ff fe4e 	bl	8000108 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800046c:	480c      	ldr	r0, [pc, #48]	; (80004a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800046e:	490d      	ldr	r1, [pc, #52]	; (80004a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000470:	4a0d      	ldr	r2, [pc, #52]	; (80004a8 <LoopForever+0xe>)
  movs r3, #0
 8000472:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000474:	e002      	b.n	800047c <LoopCopyDataInit>

08000476 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000476:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000478:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800047a:	3304      	adds	r3, #4

0800047c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800047c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800047e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000480:	d3f9      	bcc.n	8000476 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000482:	4a0a      	ldr	r2, [pc, #40]	; (80004ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8000484:	4c0a      	ldr	r4, [pc, #40]	; (80004b0 <LoopForever+0x16>)
  movs r3, #0
 8000486:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000488:	e001      	b.n	800048e <LoopFillZerobss>

0800048a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800048a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800048c:	3204      	adds	r2, #4

0800048e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800048e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000490:	d3fb      	bcc.n	800048a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000492:	f000 f811 	bl	80004b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000496:	f7ff fe95 	bl	80001c4 <main>

0800049a <LoopForever>:

LoopForever:
    b LoopForever
 800049a:	e7fe      	b.n	800049a <LoopForever>
  ldr   r0, =_estack
 800049c:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 80004a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004a4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80004a8:	08000520 	.word	0x08000520
  ldr r2, =_sbss
 80004ac:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80004b0:	20000020 	.word	0x20000020

080004b4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004b4:	e7fe      	b.n	80004b4 <ADC_IRQHandler>
	...

080004b8 <__libc_init_array>:
 80004b8:	b570      	push	{r4, r5, r6, lr}
 80004ba:	2600      	movs	r6, #0
 80004bc:	4d0c      	ldr	r5, [pc, #48]	; (80004f0 <__libc_init_array+0x38>)
 80004be:	4c0d      	ldr	r4, [pc, #52]	; (80004f4 <__libc_init_array+0x3c>)
 80004c0:	1b64      	subs	r4, r4, r5
 80004c2:	10a4      	asrs	r4, r4, #2
 80004c4:	42a6      	cmp	r6, r4
 80004c6:	d109      	bne.n	80004dc <__libc_init_array+0x24>
 80004c8:	2600      	movs	r6, #0
 80004ca:	f000 f819 	bl	8000500 <_init>
 80004ce:	4d0a      	ldr	r5, [pc, #40]	; (80004f8 <__libc_init_array+0x40>)
 80004d0:	4c0a      	ldr	r4, [pc, #40]	; (80004fc <__libc_init_array+0x44>)
 80004d2:	1b64      	subs	r4, r4, r5
 80004d4:	10a4      	asrs	r4, r4, #2
 80004d6:	42a6      	cmp	r6, r4
 80004d8:	d105      	bne.n	80004e6 <__libc_init_array+0x2e>
 80004da:	bd70      	pop	{r4, r5, r6, pc}
 80004dc:	00b3      	lsls	r3, r6, #2
 80004de:	58eb      	ldr	r3, [r5, r3]
 80004e0:	4798      	blx	r3
 80004e2:	3601      	adds	r6, #1
 80004e4:	e7ee      	b.n	80004c4 <__libc_init_array+0xc>
 80004e6:	00b3      	lsls	r3, r6, #2
 80004e8:	58eb      	ldr	r3, [r5, r3]
 80004ea:	4798      	blx	r3
 80004ec:	3601      	adds	r6, #1
 80004ee:	e7f2      	b.n	80004d6 <__libc_init_array+0x1e>
 80004f0:	08000518 	.word	0x08000518
 80004f4:	08000518 	.word	0x08000518
 80004f8:	08000518 	.word	0x08000518
 80004fc:	0800051c 	.word	0x0800051c

08000500 <_init>:
 8000500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000502:	46c0      	nop			; (mov r8, r8)
 8000504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000506:	bc08      	pop	{r3}
 8000508:	469e      	mov	lr, r3
 800050a:	4770      	bx	lr

0800050c <_fini>:
 800050c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800050e:	46c0      	nop			; (mov r8, r8)
 8000510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000512:	bc08      	pop	{r3}
 8000514:	469e      	mov	lr, r3
 8000516:	4770      	bx	lr
