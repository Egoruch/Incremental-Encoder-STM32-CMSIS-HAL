
Encoder-HAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001918  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080019d8  080019d8  000119d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001a08  08001a08  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001a08  08001a08  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001a08  08001a08  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001a08  08001a08  00011a08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001a0c  08001a0c  00011a0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001a10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000064  2000000c  08001a1c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000070  08001a1c  00020070  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006d7c  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000012ca  00000000  00000000  00026db0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000878  00000000  00000000  00028080  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000007d0  00000000  00000000  000288f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000b5a0  00000000  00000000  000290c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006373  00000000  00000000  00034668  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00042a16  00000000  00000000  0003a9db  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0007d3f1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001df4  00000000  00000000  0007d46c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080019c0 	.word	0x080019c0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080019c0 	.word	0x080019c0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 f9a4 	bl	8000570 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f816 	bl	8000258 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f8b6 	bl	800039c <MX_GPIO_Init>
  MX_TIM3_Init();
 8000230:	f000 f852 	bl	80002d8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /* Rotary (Incremental) encoder */
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000234:	4b05      	ldr	r3, [pc, #20]	; (800024c <main+0x2c>)
 8000236:	213c      	movs	r1, #60	; 0x3c
 8000238:	0018      	movs	r0, r3
 800023a:	f001 f92d 	bl	8001498 <HAL_TIM_Encoder_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  Enc_Counter = TIM3->CNT;
 800023e:	4b04      	ldr	r3, [pc, #16]	; (8000250 <main+0x30>)
 8000240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000242:	b2da      	uxtb	r2, r3
 8000244:	4b03      	ldr	r3, [pc, #12]	; (8000254 <main+0x34>)
 8000246:	701a      	strb	r2, [r3, #0]
 8000248:	e7f9      	b.n	800023e <main+0x1e>
 800024a:	46c0      	nop			; (mov r8, r8)
 800024c:	2000002c 	.word	0x2000002c
 8000250:	40000400 	.word	0x40000400
 8000254:	20000028 	.word	0x20000028

08000258 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000258:	b590      	push	{r4, r7, lr}
 800025a:	b091      	sub	sp, #68	; 0x44
 800025c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800025e:	2410      	movs	r4, #16
 8000260:	193b      	adds	r3, r7, r4
 8000262:	0018      	movs	r0, r3
 8000264:	2330      	movs	r3, #48	; 0x30
 8000266:	001a      	movs	r2, r3
 8000268:	2100      	movs	r1, #0
 800026a:	f001 fba1 	bl	80019b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800026e:	003b      	movs	r3, r7
 8000270:	0018      	movs	r0, r3
 8000272:	2310      	movs	r3, #16
 8000274:	001a      	movs	r2, r3
 8000276:	2100      	movs	r1, #0
 8000278:	f001 fb9a 	bl	80019b0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800027c:	0021      	movs	r1, r4
 800027e:	187b      	adds	r3, r7, r1
 8000280:	2202      	movs	r2, #2
 8000282:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000284:	187b      	adds	r3, r7, r1
 8000286:	2201      	movs	r2, #1
 8000288:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800028a:	187b      	adds	r3, r7, r1
 800028c:	2210      	movs	r2, #16
 800028e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000290:	187b      	adds	r3, r7, r1
 8000292:	2200      	movs	r2, #0
 8000294:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000296:	187b      	adds	r3, r7, r1
 8000298:	0018      	movs	r0, r3
 800029a:	f000 fc1b 	bl	8000ad4 <HAL_RCC_OscConfig>
 800029e:	1e03      	subs	r3, r0, #0
 80002a0:	d001      	beq.n	80002a6 <SystemClock_Config+0x4e>
  {
    Error_Handler();
 80002a2:	f000 f893 	bl	80003cc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002a6:	003b      	movs	r3, r7
 80002a8:	2207      	movs	r2, #7
 80002aa:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002ac:	003b      	movs	r3, r7
 80002ae:	2200      	movs	r2, #0
 80002b0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002b2:	003b      	movs	r3, r7
 80002b4:	2200      	movs	r2, #0
 80002b6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002b8:	003b      	movs	r3, r7
 80002ba:	2200      	movs	r2, #0
 80002bc:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002be:	003b      	movs	r3, r7
 80002c0:	2100      	movs	r1, #0
 80002c2:	0018      	movs	r0, r3
 80002c4:	f000 ff22 	bl	800110c <HAL_RCC_ClockConfig>
 80002c8:	1e03      	subs	r3, r0, #0
 80002ca:	d001      	beq.n	80002d0 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80002cc:	f000 f87e 	bl	80003cc <Error_Handler>
  }
}
 80002d0:	46c0      	nop			; (mov r8, r8)
 80002d2:	46bd      	mov	sp, r7
 80002d4:	b011      	add	sp, #68	; 0x44
 80002d6:	bd90      	pop	{r4, r7, pc}

080002d8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80002d8:	b590      	push	{r4, r7, lr}
 80002da:	b08d      	sub	sp, #52	; 0x34
 80002dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80002de:	240c      	movs	r4, #12
 80002e0:	193b      	adds	r3, r7, r4
 80002e2:	0018      	movs	r0, r3
 80002e4:	2324      	movs	r3, #36	; 0x24
 80002e6:	001a      	movs	r2, r3
 80002e8:	2100      	movs	r1, #0
 80002ea:	f001 fb61 	bl	80019b0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002ee:	1d3b      	adds	r3, r7, #4
 80002f0:	0018      	movs	r0, r3
 80002f2:	2308      	movs	r3, #8
 80002f4:	001a      	movs	r2, r3
 80002f6:	2100      	movs	r1, #0
 80002f8:	f001 fb5a 	bl	80019b0 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80002fc:	4b25      	ldr	r3, [pc, #148]	; (8000394 <MX_TIM3_Init+0xbc>)
 80002fe:	4a26      	ldr	r2, [pc, #152]	; (8000398 <MX_TIM3_Init+0xc0>)
 8000300:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000302:	4b24      	ldr	r3, [pc, #144]	; (8000394 <MX_TIM3_Init+0xbc>)
 8000304:	2200      	movs	r2, #0
 8000306:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000308:	4b22      	ldr	r3, [pc, #136]	; (8000394 <MX_TIM3_Init+0xbc>)
 800030a:	2200      	movs	r2, #0
 800030c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 30;
 800030e:	4b21      	ldr	r3, [pc, #132]	; (8000394 <MX_TIM3_Init+0xbc>)
 8000310:	221e      	movs	r2, #30
 8000312:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000314:	4b1f      	ldr	r3, [pc, #124]	; (8000394 <MX_TIM3_Init+0xbc>)
 8000316:	2200      	movs	r2, #0
 8000318:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800031a:	4b1e      	ldr	r3, [pc, #120]	; (8000394 <MX_TIM3_Init+0xbc>)
 800031c:	2200      	movs	r2, #0
 800031e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000320:	0021      	movs	r1, r4
 8000322:	187b      	adds	r3, r7, r1
 8000324:	2201      	movs	r2, #1
 8000326:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000328:	187b      	adds	r3, r7, r1
 800032a:	2200      	movs	r2, #0
 800032c:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800032e:	187b      	adds	r3, r7, r1
 8000330:	2201      	movs	r2, #1
 8000332:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000334:	187b      	adds	r3, r7, r1
 8000336:	2200      	movs	r2, #0
 8000338:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 6;
 800033a:	187b      	adds	r3, r7, r1
 800033c:	2206      	movs	r2, #6
 800033e:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000340:	187b      	adds	r3, r7, r1
 8000342:	2200      	movs	r2, #0
 8000344:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000346:	187b      	adds	r3, r7, r1
 8000348:	2201      	movs	r2, #1
 800034a:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800034c:	187b      	adds	r3, r7, r1
 800034e:	2200      	movs	r2, #0
 8000350:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 6;
 8000352:	187b      	adds	r3, r7, r1
 8000354:	2206      	movs	r2, #6
 8000356:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000358:	187a      	adds	r2, r7, r1
 800035a:	4b0e      	ldr	r3, [pc, #56]	; (8000394 <MX_TIM3_Init+0xbc>)
 800035c:	0011      	movs	r1, r2
 800035e:	0018      	movs	r0, r3
 8000360:	f001 f806 	bl	8001370 <HAL_TIM_Encoder_Init>
 8000364:	1e03      	subs	r3, r0, #0
 8000366:	d001      	beq.n	800036c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000368:	f000 f830 	bl	80003cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800036c:	1d3b      	adds	r3, r7, #4
 800036e:	2200      	movs	r2, #0
 8000370:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000372:	1d3b      	adds	r3, r7, #4
 8000374:	2200      	movs	r2, #0
 8000376:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000378:	1d3a      	adds	r2, r7, #4
 800037a:	4b06      	ldr	r3, [pc, #24]	; (8000394 <MX_TIM3_Init+0xbc>)
 800037c:	0011      	movs	r1, r2
 800037e:	0018      	movs	r0, r3
 8000380:	f001 fa90 	bl	80018a4 <HAL_TIMEx_MasterConfigSynchronization>
 8000384:	1e03      	subs	r3, r0, #0
 8000386:	d001      	beq.n	800038c <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000388:	f000 f820 	bl	80003cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800038c:	46c0      	nop			; (mov r8, r8)
 800038e:	46bd      	mov	sp, r7
 8000390:	b00d      	add	sp, #52	; 0x34
 8000392:	bd90      	pop	{r4, r7, pc}
 8000394:	2000002c 	.word	0x2000002c
 8000398:	40000400 	.word	0x40000400

0800039c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b082      	sub	sp, #8
 80003a0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003a2:	4b09      	ldr	r3, [pc, #36]	; (80003c8 <MX_GPIO_Init+0x2c>)
 80003a4:	695a      	ldr	r2, [r3, #20]
 80003a6:	4b08      	ldr	r3, [pc, #32]	; (80003c8 <MX_GPIO_Init+0x2c>)
 80003a8:	2180      	movs	r1, #128	; 0x80
 80003aa:	0289      	lsls	r1, r1, #10
 80003ac:	430a      	orrs	r2, r1
 80003ae:	615a      	str	r2, [r3, #20]
 80003b0:	4b05      	ldr	r3, [pc, #20]	; (80003c8 <MX_GPIO_Init+0x2c>)
 80003b2:	695a      	ldr	r2, [r3, #20]
 80003b4:	2380      	movs	r3, #128	; 0x80
 80003b6:	029b      	lsls	r3, r3, #10
 80003b8:	4013      	ands	r3, r2
 80003ba:	607b      	str	r3, [r7, #4]
 80003bc:	687b      	ldr	r3, [r7, #4]

}
 80003be:	46c0      	nop			; (mov r8, r8)
 80003c0:	46bd      	mov	sp, r7
 80003c2:	b002      	add	sp, #8
 80003c4:	bd80      	pop	{r7, pc}
 80003c6:	46c0      	nop			; (mov r8, r8)
 80003c8:	40021000 	.word	0x40021000

080003cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80003d0:	46c0      	nop			; (mov r8, r8)
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bd80      	pop	{r7, pc}
	...

080003d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b082      	sub	sp, #8
 80003dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003de:	4b0f      	ldr	r3, [pc, #60]	; (800041c <HAL_MspInit+0x44>)
 80003e0:	699a      	ldr	r2, [r3, #24]
 80003e2:	4b0e      	ldr	r3, [pc, #56]	; (800041c <HAL_MspInit+0x44>)
 80003e4:	2101      	movs	r1, #1
 80003e6:	430a      	orrs	r2, r1
 80003e8:	619a      	str	r2, [r3, #24]
 80003ea:	4b0c      	ldr	r3, [pc, #48]	; (800041c <HAL_MspInit+0x44>)
 80003ec:	699b      	ldr	r3, [r3, #24]
 80003ee:	2201      	movs	r2, #1
 80003f0:	4013      	ands	r3, r2
 80003f2:	607b      	str	r3, [r7, #4]
 80003f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003f6:	4b09      	ldr	r3, [pc, #36]	; (800041c <HAL_MspInit+0x44>)
 80003f8:	69da      	ldr	r2, [r3, #28]
 80003fa:	4b08      	ldr	r3, [pc, #32]	; (800041c <HAL_MspInit+0x44>)
 80003fc:	2180      	movs	r1, #128	; 0x80
 80003fe:	0549      	lsls	r1, r1, #21
 8000400:	430a      	orrs	r2, r1
 8000402:	61da      	str	r2, [r3, #28]
 8000404:	4b05      	ldr	r3, [pc, #20]	; (800041c <HAL_MspInit+0x44>)
 8000406:	69da      	ldr	r2, [r3, #28]
 8000408:	2380      	movs	r3, #128	; 0x80
 800040a:	055b      	lsls	r3, r3, #21
 800040c:	4013      	ands	r3, r2
 800040e:	603b      	str	r3, [r7, #0]
 8000410:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	46bd      	mov	sp, r7
 8000416:	b002      	add	sp, #8
 8000418:	bd80      	pop	{r7, pc}
 800041a:	46c0      	nop			; (mov r8, r8)
 800041c:	40021000 	.word	0x40021000

08000420 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b08a      	sub	sp, #40	; 0x28
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000428:	2314      	movs	r3, #20
 800042a:	18fb      	adds	r3, r7, r3
 800042c:	0018      	movs	r0, r3
 800042e:	2314      	movs	r3, #20
 8000430:	001a      	movs	r2, r3
 8000432:	2100      	movs	r1, #0
 8000434:	f001 fabc 	bl	80019b0 <memset>
  if(htim_encoder->Instance==TIM3)
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	4a1f      	ldr	r2, [pc, #124]	; (80004bc <HAL_TIM_Encoder_MspInit+0x9c>)
 800043e:	4293      	cmp	r3, r2
 8000440:	d138      	bne.n	80004b4 <HAL_TIM_Encoder_MspInit+0x94>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000442:	4b1f      	ldr	r3, [pc, #124]	; (80004c0 <HAL_TIM_Encoder_MspInit+0xa0>)
 8000444:	69da      	ldr	r2, [r3, #28]
 8000446:	4b1e      	ldr	r3, [pc, #120]	; (80004c0 <HAL_TIM_Encoder_MspInit+0xa0>)
 8000448:	2102      	movs	r1, #2
 800044a:	430a      	orrs	r2, r1
 800044c:	61da      	str	r2, [r3, #28]
 800044e:	4b1c      	ldr	r3, [pc, #112]	; (80004c0 <HAL_TIM_Encoder_MspInit+0xa0>)
 8000450:	69db      	ldr	r3, [r3, #28]
 8000452:	2202      	movs	r2, #2
 8000454:	4013      	ands	r3, r2
 8000456:	613b      	str	r3, [r7, #16]
 8000458:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800045a:	4b19      	ldr	r3, [pc, #100]	; (80004c0 <HAL_TIM_Encoder_MspInit+0xa0>)
 800045c:	695a      	ldr	r2, [r3, #20]
 800045e:	4b18      	ldr	r3, [pc, #96]	; (80004c0 <HAL_TIM_Encoder_MspInit+0xa0>)
 8000460:	2180      	movs	r1, #128	; 0x80
 8000462:	0289      	lsls	r1, r1, #10
 8000464:	430a      	orrs	r2, r1
 8000466:	615a      	str	r2, [r3, #20]
 8000468:	4b15      	ldr	r3, [pc, #84]	; (80004c0 <HAL_TIM_Encoder_MspInit+0xa0>)
 800046a:	695a      	ldr	r2, [r3, #20]
 800046c:	2380      	movs	r3, #128	; 0x80
 800046e:	029b      	lsls	r3, r3, #10
 8000470:	4013      	ands	r3, r2
 8000472:	60fb      	str	r3, [r7, #12]
 8000474:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC_CLK_Pin|ENC_DT_Pin;
 8000476:	2114      	movs	r1, #20
 8000478:	187b      	adds	r3, r7, r1
 800047a:	22c0      	movs	r2, #192	; 0xc0
 800047c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800047e:	187b      	adds	r3, r7, r1
 8000480:	2202      	movs	r2, #2
 8000482:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000484:	187b      	adds	r3, r7, r1
 8000486:	2200      	movs	r2, #0
 8000488:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800048a:	187b      	adds	r3, r7, r1
 800048c:	2200      	movs	r2, #0
 800048e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000490:	187b      	adds	r3, r7, r1
 8000492:	2201      	movs	r2, #1
 8000494:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000496:	187a      	adds	r2, r7, r1
 8000498:	2390      	movs	r3, #144	; 0x90
 800049a:	05db      	lsls	r3, r3, #23
 800049c:	0011      	movs	r1, r2
 800049e:	0018      	movs	r0, r3
 80004a0:	f000 f9a8 	bl	80007f4 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80004a4:	2200      	movs	r2, #0
 80004a6:	2100      	movs	r1, #0
 80004a8:	2010      	movs	r0, #16
 80004aa:	f000 f971 	bl	8000790 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80004ae:	2010      	movs	r0, #16
 80004b0:	f000 f983 	bl	80007ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80004b4:	46c0      	nop			; (mov r8, r8)
 80004b6:	46bd      	mov	sp, r7
 80004b8:	b00a      	add	sp, #40	; 0x28
 80004ba:	bd80      	pop	{r7, pc}
 80004bc:	40000400 	.word	0x40000400
 80004c0:	40021000 	.word	0x40021000

080004c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80004c8:	46c0      	nop			; (mov r8, r8)
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bd80      	pop	{r7, pc}

080004ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004ce:	b580      	push	{r7, lr}
 80004d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004d2:	e7fe      	b.n	80004d2 <HardFault_Handler+0x4>

080004d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80004d8:	46c0      	nop			; (mov r8, r8)
 80004da:	46bd      	mov	sp, r7
 80004dc:	bd80      	pop	{r7, pc}

080004de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004de:	b580      	push	{r7, lr}
 80004e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004e2:	46c0      	nop			; (mov r8, r8)
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bd80      	pop	{r7, pc}

080004e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004ec:	f000 f888 	bl	8000600 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004f0:	46c0      	nop			; (mov r8, r8)
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bd80      	pop	{r7, pc}
	...

080004f8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80004fc:	4b03      	ldr	r3, [pc, #12]	; (800050c <TIM3_IRQHandler+0x14>)
 80004fe:	0018      	movs	r0, r3
 8000500:	f001 f801 	bl	8001506 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000504:	46c0      	nop			; (mov r8, r8)
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}
 800050a:	46c0      	nop			; (mov r8, r8)
 800050c:	2000002c 	.word	0x2000002c

08000510 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000514:	46c0      	nop			; (mov r8, r8)
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}
	...

0800051c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800051c:	480d      	ldr	r0, [pc, #52]	; (8000554 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800051e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000520:	480d      	ldr	r0, [pc, #52]	; (8000558 <LoopForever+0x6>)
  ldr r1, =_edata
 8000522:	490e      	ldr	r1, [pc, #56]	; (800055c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000524:	4a0e      	ldr	r2, [pc, #56]	; (8000560 <LoopForever+0xe>)
  movs r3, #0
 8000526:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000528:	e002      	b.n	8000530 <LoopCopyDataInit>

0800052a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800052a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800052c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800052e:	3304      	adds	r3, #4

08000530 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000530:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000532:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000534:	d3f9      	bcc.n	800052a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000536:	4a0b      	ldr	r2, [pc, #44]	; (8000564 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000538:	4c0b      	ldr	r4, [pc, #44]	; (8000568 <LoopForever+0x16>)
  movs r3, #0
 800053a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800053c:	e001      	b.n	8000542 <LoopFillZerobss>

0800053e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800053e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000540:	3204      	adds	r2, #4

08000542 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000542:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000544:	d3fb      	bcc.n	800053e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000546:	f7ff ffe3 	bl	8000510 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800054a:	f001 fa0d 	bl	8001968 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800054e:	f7ff fe67 	bl	8000220 <main>

08000552 <LoopForever>:

LoopForever:
    b LoopForever
 8000552:	e7fe      	b.n	8000552 <LoopForever>
  ldr   r0, =_estack
 8000554:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8000558:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800055c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000560:	08001a10 	.word	0x08001a10
  ldr r2, =_sbss
 8000564:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000568:	20000070 	.word	0x20000070

0800056c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800056c:	e7fe      	b.n	800056c <ADC1_IRQHandler>
	...

08000570 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000574:	4b07      	ldr	r3, [pc, #28]	; (8000594 <HAL_Init+0x24>)
 8000576:	681a      	ldr	r2, [r3, #0]
 8000578:	4b06      	ldr	r3, [pc, #24]	; (8000594 <HAL_Init+0x24>)
 800057a:	2110      	movs	r1, #16
 800057c:	430a      	orrs	r2, r1
 800057e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000580:	2000      	movs	r0, #0
 8000582:	f000 f809 	bl	8000598 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000586:	f7ff ff27 	bl	80003d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800058a:	2300      	movs	r3, #0
}
 800058c:	0018      	movs	r0, r3
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
 8000592:	46c0      	nop			; (mov r8, r8)
 8000594:	40022000 	.word	0x40022000

08000598 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000598:	b590      	push	{r4, r7, lr}
 800059a:	b083      	sub	sp, #12
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005a0:	4b14      	ldr	r3, [pc, #80]	; (80005f4 <HAL_InitTick+0x5c>)
 80005a2:	681c      	ldr	r4, [r3, #0]
 80005a4:	4b14      	ldr	r3, [pc, #80]	; (80005f8 <HAL_InitTick+0x60>)
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	0019      	movs	r1, r3
 80005aa:	23fa      	movs	r3, #250	; 0xfa
 80005ac:	0098      	lsls	r0, r3, #2
 80005ae:	f7ff fdab 	bl	8000108 <__udivsi3>
 80005b2:	0003      	movs	r3, r0
 80005b4:	0019      	movs	r1, r3
 80005b6:	0020      	movs	r0, r4
 80005b8:	f7ff fda6 	bl	8000108 <__udivsi3>
 80005bc:	0003      	movs	r3, r0
 80005be:	0018      	movs	r0, r3
 80005c0:	f000 f90b 	bl	80007da <HAL_SYSTICK_Config>
 80005c4:	1e03      	subs	r3, r0, #0
 80005c6:	d001      	beq.n	80005cc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80005c8:	2301      	movs	r3, #1
 80005ca:	e00f      	b.n	80005ec <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	2b03      	cmp	r3, #3
 80005d0:	d80b      	bhi.n	80005ea <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005d2:	6879      	ldr	r1, [r7, #4]
 80005d4:	2301      	movs	r3, #1
 80005d6:	425b      	negs	r3, r3
 80005d8:	2200      	movs	r2, #0
 80005da:	0018      	movs	r0, r3
 80005dc:	f000 f8d8 	bl	8000790 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005e0:	4b06      	ldr	r3, [pc, #24]	; (80005fc <HAL_InitTick+0x64>)
 80005e2:	687a      	ldr	r2, [r7, #4]
 80005e4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80005e6:	2300      	movs	r3, #0
 80005e8:	e000      	b.n	80005ec <HAL_InitTick+0x54>
    return HAL_ERROR;
 80005ea:	2301      	movs	r3, #1
}
 80005ec:	0018      	movs	r0, r3
 80005ee:	46bd      	mov	sp, r7
 80005f0:	b003      	add	sp, #12
 80005f2:	bd90      	pop	{r4, r7, pc}
 80005f4:	20000000 	.word	0x20000000
 80005f8:	20000008 	.word	0x20000008
 80005fc:	20000004 	.word	0x20000004

08000600 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000604:	4b05      	ldr	r3, [pc, #20]	; (800061c <HAL_IncTick+0x1c>)
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	001a      	movs	r2, r3
 800060a:	4b05      	ldr	r3, [pc, #20]	; (8000620 <HAL_IncTick+0x20>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	18d2      	adds	r2, r2, r3
 8000610:	4b03      	ldr	r3, [pc, #12]	; (8000620 <HAL_IncTick+0x20>)
 8000612:	601a      	str	r2, [r3, #0]
}
 8000614:	46c0      	nop			; (mov r8, r8)
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	46c0      	nop			; (mov r8, r8)
 800061c:	20000008 	.word	0x20000008
 8000620:	2000006c 	.word	0x2000006c

08000624 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
  return uwTick;
 8000628:	4b02      	ldr	r3, [pc, #8]	; (8000634 <HAL_GetTick+0x10>)
 800062a:	681b      	ldr	r3, [r3, #0]
}
 800062c:	0018      	movs	r0, r3
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	46c0      	nop			; (mov r8, r8)
 8000634:	2000006c 	.word	0x2000006c

08000638 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
 800063e:	0002      	movs	r2, r0
 8000640:	1dfb      	adds	r3, r7, #7
 8000642:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000644:	1dfb      	adds	r3, r7, #7
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	2b7f      	cmp	r3, #127	; 0x7f
 800064a:	d809      	bhi.n	8000660 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800064c:	1dfb      	adds	r3, r7, #7
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	001a      	movs	r2, r3
 8000652:	231f      	movs	r3, #31
 8000654:	401a      	ands	r2, r3
 8000656:	4b04      	ldr	r3, [pc, #16]	; (8000668 <__NVIC_EnableIRQ+0x30>)
 8000658:	2101      	movs	r1, #1
 800065a:	4091      	lsls	r1, r2
 800065c:	000a      	movs	r2, r1
 800065e:	601a      	str	r2, [r3, #0]
  }
}
 8000660:	46c0      	nop			; (mov r8, r8)
 8000662:	46bd      	mov	sp, r7
 8000664:	b002      	add	sp, #8
 8000666:	bd80      	pop	{r7, pc}
 8000668:	e000e100 	.word	0xe000e100

0800066c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800066c:	b590      	push	{r4, r7, lr}
 800066e:	b083      	sub	sp, #12
 8000670:	af00      	add	r7, sp, #0
 8000672:	0002      	movs	r2, r0
 8000674:	6039      	str	r1, [r7, #0]
 8000676:	1dfb      	adds	r3, r7, #7
 8000678:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800067a:	1dfb      	adds	r3, r7, #7
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	2b7f      	cmp	r3, #127	; 0x7f
 8000680:	d828      	bhi.n	80006d4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000682:	4a2f      	ldr	r2, [pc, #188]	; (8000740 <__NVIC_SetPriority+0xd4>)
 8000684:	1dfb      	adds	r3, r7, #7
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	b25b      	sxtb	r3, r3
 800068a:	089b      	lsrs	r3, r3, #2
 800068c:	33c0      	adds	r3, #192	; 0xc0
 800068e:	009b      	lsls	r3, r3, #2
 8000690:	589b      	ldr	r3, [r3, r2]
 8000692:	1dfa      	adds	r2, r7, #7
 8000694:	7812      	ldrb	r2, [r2, #0]
 8000696:	0011      	movs	r1, r2
 8000698:	2203      	movs	r2, #3
 800069a:	400a      	ands	r2, r1
 800069c:	00d2      	lsls	r2, r2, #3
 800069e:	21ff      	movs	r1, #255	; 0xff
 80006a0:	4091      	lsls	r1, r2
 80006a2:	000a      	movs	r2, r1
 80006a4:	43d2      	mvns	r2, r2
 80006a6:	401a      	ands	r2, r3
 80006a8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80006aa:	683b      	ldr	r3, [r7, #0]
 80006ac:	019b      	lsls	r3, r3, #6
 80006ae:	22ff      	movs	r2, #255	; 0xff
 80006b0:	401a      	ands	r2, r3
 80006b2:	1dfb      	adds	r3, r7, #7
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	0018      	movs	r0, r3
 80006b8:	2303      	movs	r3, #3
 80006ba:	4003      	ands	r3, r0
 80006bc:	00db      	lsls	r3, r3, #3
 80006be:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80006c0:	481f      	ldr	r0, [pc, #124]	; (8000740 <__NVIC_SetPriority+0xd4>)
 80006c2:	1dfb      	adds	r3, r7, #7
 80006c4:	781b      	ldrb	r3, [r3, #0]
 80006c6:	b25b      	sxtb	r3, r3
 80006c8:	089b      	lsrs	r3, r3, #2
 80006ca:	430a      	orrs	r2, r1
 80006cc:	33c0      	adds	r3, #192	; 0xc0
 80006ce:	009b      	lsls	r3, r3, #2
 80006d0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80006d2:	e031      	b.n	8000738 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80006d4:	4a1b      	ldr	r2, [pc, #108]	; (8000744 <__NVIC_SetPriority+0xd8>)
 80006d6:	1dfb      	adds	r3, r7, #7
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	0019      	movs	r1, r3
 80006dc:	230f      	movs	r3, #15
 80006de:	400b      	ands	r3, r1
 80006e0:	3b08      	subs	r3, #8
 80006e2:	089b      	lsrs	r3, r3, #2
 80006e4:	3306      	adds	r3, #6
 80006e6:	009b      	lsls	r3, r3, #2
 80006e8:	18d3      	adds	r3, r2, r3
 80006ea:	3304      	adds	r3, #4
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	1dfa      	adds	r2, r7, #7
 80006f0:	7812      	ldrb	r2, [r2, #0]
 80006f2:	0011      	movs	r1, r2
 80006f4:	2203      	movs	r2, #3
 80006f6:	400a      	ands	r2, r1
 80006f8:	00d2      	lsls	r2, r2, #3
 80006fa:	21ff      	movs	r1, #255	; 0xff
 80006fc:	4091      	lsls	r1, r2
 80006fe:	000a      	movs	r2, r1
 8000700:	43d2      	mvns	r2, r2
 8000702:	401a      	ands	r2, r3
 8000704:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000706:	683b      	ldr	r3, [r7, #0]
 8000708:	019b      	lsls	r3, r3, #6
 800070a:	22ff      	movs	r2, #255	; 0xff
 800070c:	401a      	ands	r2, r3
 800070e:	1dfb      	adds	r3, r7, #7
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	0018      	movs	r0, r3
 8000714:	2303      	movs	r3, #3
 8000716:	4003      	ands	r3, r0
 8000718:	00db      	lsls	r3, r3, #3
 800071a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800071c:	4809      	ldr	r0, [pc, #36]	; (8000744 <__NVIC_SetPriority+0xd8>)
 800071e:	1dfb      	adds	r3, r7, #7
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	001c      	movs	r4, r3
 8000724:	230f      	movs	r3, #15
 8000726:	4023      	ands	r3, r4
 8000728:	3b08      	subs	r3, #8
 800072a:	089b      	lsrs	r3, r3, #2
 800072c:	430a      	orrs	r2, r1
 800072e:	3306      	adds	r3, #6
 8000730:	009b      	lsls	r3, r3, #2
 8000732:	18c3      	adds	r3, r0, r3
 8000734:	3304      	adds	r3, #4
 8000736:	601a      	str	r2, [r3, #0]
}
 8000738:	46c0      	nop			; (mov r8, r8)
 800073a:	46bd      	mov	sp, r7
 800073c:	b003      	add	sp, #12
 800073e:	bd90      	pop	{r4, r7, pc}
 8000740:	e000e100 	.word	0xe000e100
 8000744:	e000ed00 	.word	0xe000ed00

08000748 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	3b01      	subs	r3, #1
 8000754:	4a0c      	ldr	r2, [pc, #48]	; (8000788 <SysTick_Config+0x40>)
 8000756:	4293      	cmp	r3, r2
 8000758:	d901      	bls.n	800075e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800075a:	2301      	movs	r3, #1
 800075c:	e010      	b.n	8000780 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800075e:	4b0b      	ldr	r3, [pc, #44]	; (800078c <SysTick_Config+0x44>)
 8000760:	687a      	ldr	r2, [r7, #4]
 8000762:	3a01      	subs	r2, #1
 8000764:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000766:	2301      	movs	r3, #1
 8000768:	425b      	negs	r3, r3
 800076a:	2103      	movs	r1, #3
 800076c:	0018      	movs	r0, r3
 800076e:	f7ff ff7d 	bl	800066c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000772:	4b06      	ldr	r3, [pc, #24]	; (800078c <SysTick_Config+0x44>)
 8000774:	2200      	movs	r2, #0
 8000776:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000778:	4b04      	ldr	r3, [pc, #16]	; (800078c <SysTick_Config+0x44>)
 800077a:	2207      	movs	r2, #7
 800077c:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800077e:	2300      	movs	r3, #0
}
 8000780:	0018      	movs	r0, r3
 8000782:	46bd      	mov	sp, r7
 8000784:	b002      	add	sp, #8
 8000786:	bd80      	pop	{r7, pc}
 8000788:	00ffffff 	.word	0x00ffffff
 800078c:	e000e010 	.word	0xe000e010

08000790 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000790:	b580      	push	{r7, lr}
 8000792:	b084      	sub	sp, #16
 8000794:	af00      	add	r7, sp, #0
 8000796:	60b9      	str	r1, [r7, #8]
 8000798:	607a      	str	r2, [r7, #4]
 800079a:	210f      	movs	r1, #15
 800079c:	187b      	adds	r3, r7, r1
 800079e:	1c02      	adds	r2, r0, #0
 80007a0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80007a2:	68ba      	ldr	r2, [r7, #8]
 80007a4:	187b      	adds	r3, r7, r1
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	b25b      	sxtb	r3, r3
 80007aa:	0011      	movs	r1, r2
 80007ac:	0018      	movs	r0, r3
 80007ae:	f7ff ff5d 	bl	800066c <__NVIC_SetPriority>
}
 80007b2:	46c0      	nop			; (mov r8, r8)
 80007b4:	46bd      	mov	sp, r7
 80007b6:	b004      	add	sp, #16
 80007b8:	bd80      	pop	{r7, pc}

080007ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007ba:	b580      	push	{r7, lr}
 80007bc:	b082      	sub	sp, #8
 80007be:	af00      	add	r7, sp, #0
 80007c0:	0002      	movs	r2, r0
 80007c2:	1dfb      	adds	r3, r7, #7
 80007c4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007c6:	1dfb      	adds	r3, r7, #7
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	b25b      	sxtb	r3, r3
 80007cc:	0018      	movs	r0, r3
 80007ce:	f7ff ff33 	bl	8000638 <__NVIC_EnableIRQ>
}
 80007d2:	46c0      	nop			; (mov r8, r8)
 80007d4:	46bd      	mov	sp, r7
 80007d6:	b002      	add	sp, #8
 80007d8:	bd80      	pop	{r7, pc}

080007da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007da:	b580      	push	{r7, lr}
 80007dc:	b082      	sub	sp, #8
 80007de:	af00      	add	r7, sp, #0
 80007e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	0018      	movs	r0, r3
 80007e6:	f7ff ffaf 	bl	8000748 <SysTick_Config>
 80007ea:	0003      	movs	r3, r0
}
 80007ec:	0018      	movs	r0, r3
 80007ee:	46bd      	mov	sp, r7
 80007f0:	b002      	add	sp, #8
 80007f2:	bd80      	pop	{r7, pc}

080007f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b086      	sub	sp, #24
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
 80007fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80007fe:	2300      	movs	r3, #0
 8000800:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000802:	e14f      	b.n	8000aa4 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000804:	683b      	ldr	r3, [r7, #0]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	2101      	movs	r1, #1
 800080a:	697a      	ldr	r2, [r7, #20]
 800080c:	4091      	lsls	r1, r2
 800080e:	000a      	movs	r2, r1
 8000810:	4013      	ands	r3, r2
 8000812:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	2b00      	cmp	r3, #0
 8000818:	d100      	bne.n	800081c <HAL_GPIO_Init+0x28>
 800081a:	e140      	b.n	8000a9e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800081c:	683b      	ldr	r3, [r7, #0]
 800081e:	685b      	ldr	r3, [r3, #4]
 8000820:	2b01      	cmp	r3, #1
 8000822:	d00b      	beq.n	800083c <HAL_GPIO_Init+0x48>
 8000824:	683b      	ldr	r3, [r7, #0]
 8000826:	685b      	ldr	r3, [r3, #4]
 8000828:	2b02      	cmp	r3, #2
 800082a:	d007      	beq.n	800083c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800082c:	683b      	ldr	r3, [r7, #0]
 800082e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000830:	2b11      	cmp	r3, #17
 8000832:	d003      	beq.n	800083c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000834:	683b      	ldr	r3, [r7, #0]
 8000836:	685b      	ldr	r3, [r3, #4]
 8000838:	2b12      	cmp	r3, #18
 800083a:	d130      	bne.n	800089e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	689b      	ldr	r3, [r3, #8]
 8000840:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000842:	697b      	ldr	r3, [r7, #20]
 8000844:	005b      	lsls	r3, r3, #1
 8000846:	2203      	movs	r2, #3
 8000848:	409a      	lsls	r2, r3
 800084a:	0013      	movs	r3, r2
 800084c:	43da      	mvns	r2, r3
 800084e:	693b      	ldr	r3, [r7, #16]
 8000850:	4013      	ands	r3, r2
 8000852:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000854:	683b      	ldr	r3, [r7, #0]
 8000856:	68da      	ldr	r2, [r3, #12]
 8000858:	697b      	ldr	r3, [r7, #20]
 800085a:	005b      	lsls	r3, r3, #1
 800085c:	409a      	lsls	r2, r3
 800085e:	0013      	movs	r3, r2
 8000860:	693a      	ldr	r2, [r7, #16]
 8000862:	4313      	orrs	r3, r2
 8000864:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	693a      	ldr	r2, [r7, #16]
 800086a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	685b      	ldr	r3, [r3, #4]
 8000870:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000872:	2201      	movs	r2, #1
 8000874:	697b      	ldr	r3, [r7, #20]
 8000876:	409a      	lsls	r2, r3
 8000878:	0013      	movs	r3, r2
 800087a:	43da      	mvns	r2, r3
 800087c:	693b      	ldr	r3, [r7, #16]
 800087e:	4013      	ands	r3, r2
 8000880:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	685b      	ldr	r3, [r3, #4]
 8000886:	091b      	lsrs	r3, r3, #4
 8000888:	2201      	movs	r2, #1
 800088a:	401a      	ands	r2, r3
 800088c:	697b      	ldr	r3, [r7, #20]
 800088e:	409a      	lsls	r2, r3
 8000890:	0013      	movs	r3, r2
 8000892:	693a      	ldr	r2, [r7, #16]
 8000894:	4313      	orrs	r3, r2
 8000896:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	693a      	ldr	r2, [r7, #16]
 800089c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	68db      	ldr	r3, [r3, #12]
 80008a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80008a4:	697b      	ldr	r3, [r7, #20]
 80008a6:	005b      	lsls	r3, r3, #1
 80008a8:	2203      	movs	r2, #3
 80008aa:	409a      	lsls	r2, r3
 80008ac:	0013      	movs	r3, r2
 80008ae:	43da      	mvns	r2, r3
 80008b0:	693b      	ldr	r3, [r7, #16]
 80008b2:	4013      	ands	r3, r2
 80008b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80008b6:	683b      	ldr	r3, [r7, #0]
 80008b8:	689a      	ldr	r2, [r3, #8]
 80008ba:	697b      	ldr	r3, [r7, #20]
 80008bc:	005b      	lsls	r3, r3, #1
 80008be:	409a      	lsls	r2, r3
 80008c0:	0013      	movs	r3, r2
 80008c2:	693a      	ldr	r2, [r7, #16]
 80008c4:	4313      	orrs	r3, r2
 80008c6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	693a      	ldr	r2, [r7, #16]
 80008cc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	685b      	ldr	r3, [r3, #4]
 80008d2:	2b02      	cmp	r3, #2
 80008d4:	d003      	beq.n	80008de <HAL_GPIO_Init+0xea>
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	685b      	ldr	r3, [r3, #4]
 80008da:	2b12      	cmp	r3, #18
 80008dc:	d123      	bne.n	8000926 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80008de:	697b      	ldr	r3, [r7, #20]
 80008e0:	08da      	lsrs	r2, r3, #3
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	3208      	adds	r2, #8
 80008e6:	0092      	lsls	r2, r2, #2
 80008e8:	58d3      	ldr	r3, [r2, r3]
 80008ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80008ec:	697b      	ldr	r3, [r7, #20]
 80008ee:	2207      	movs	r2, #7
 80008f0:	4013      	ands	r3, r2
 80008f2:	009b      	lsls	r3, r3, #2
 80008f4:	220f      	movs	r2, #15
 80008f6:	409a      	lsls	r2, r3
 80008f8:	0013      	movs	r3, r2
 80008fa:	43da      	mvns	r2, r3
 80008fc:	693b      	ldr	r3, [r7, #16]
 80008fe:	4013      	ands	r3, r2
 8000900:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	691a      	ldr	r2, [r3, #16]
 8000906:	697b      	ldr	r3, [r7, #20]
 8000908:	2107      	movs	r1, #7
 800090a:	400b      	ands	r3, r1
 800090c:	009b      	lsls	r3, r3, #2
 800090e:	409a      	lsls	r2, r3
 8000910:	0013      	movs	r3, r2
 8000912:	693a      	ldr	r2, [r7, #16]
 8000914:	4313      	orrs	r3, r2
 8000916:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000918:	697b      	ldr	r3, [r7, #20]
 800091a:	08da      	lsrs	r2, r3, #3
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	3208      	adds	r2, #8
 8000920:	0092      	lsls	r2, r2, #2
 8000922:	6939      	ldr	r1, [r7, #16]
 8000924:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800092c:	697b      	ldr	r3, [r7, #20]
 800092e:	005b      	lsls	r3, r3, #1
 8000930:	2203      	movs	r2, #3
 8000932:	409a      	lsls	r2, r3
 8000934:	0013      	movs	r3, r2
 8000936:	43da      	mvns	r2, r3
 8000938:	693b      	ldr	r3, [r7, #16]
 800093a:	4013      	ands	r3, r2
 800093c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	685b      	ldr	r3, [r3, #4]
 8000942:	2203      	movs	r2, #3
 8000944:	401a      	ands	r2, r3
 8000946:	697b      	ldr	r3, [r7, #20]
 8000948:	005b      	lsls	r3, r3, #1
 800094a:	409a      	lsls	r2, r3
 800094c:	0013      	movs	r3, r2
 800094e:	693a      	ldr	r2, [r7, #16]
 8000950:	4313      	orrs	r3, r2
 8000952:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	693a      	ldr	r2, [r7, #16]
 8000958:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	685a      	ldr	r2, [r3, #4]
 800095e:	2380      	movs	r3, #128	; 0x80
 8000960:	055b      	lsls	r3, r3, #21
 8000962:	4013      	ands	r3, r2
 8000964:	d100      	bne.n	8000968 <HAL_GPIO_Init+0x174>
 8000966:	e09a      	b.n	8000a9e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000968:	4b54      	ldr	r3, [pc, #336]	; (8000abc <HAL_GPIO_Init+0x2c8>)
 800096a:	699a      	ldr	r2, [r3, #24]
 800096c:	4b53      	ldr	r3, [pc, #332]	; (8000abc <HAL_GPIO_Init+0x2c8>)
 800096e:	2101      	movs	r1, #1
 8000970:	430a      	orrs	r2, r1
 8000972:	619a      	str	r2, [r3, #24]
 8000974:	4b51      	ldr	r3, [pc, #324]	; (8000abc <HAL_GPIO_Init+0x2c8>)
 8000976:	699b      	ldr	r3, [r3, #24]
 8000978:	2201      	movs	r2, #1
 800097a:	4013      	ands	r3, r2
 800097c:	60bb      	str	r3, [r7, #8]
 800097e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000980:	4a4f      	ldr	r2, [pc, #316]	; (8000ac0 <HAL_GPIO_Init+0x2cc>)
 8000982:	697b      	ldr	r3, [r7, #20]
 8000984:	089b      	lsrs	r3, r3, #2
 8000986:	3302      	adds	r3, #2
 8000988:	009b      	lsls	r3, r3, #2
 800098a:	589b      	ldr	r3, [r3, r2]
 800098c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800098e:	697b      	ldr	r3, [r7, #20]
 8000990:	2203      	movs	r2, #3
 8000992:	4013      	ands	r3, r2
 8000994:	009b      	lsls	r3, r3, #2
 8000996:	220f      	movs	r2, #15
 8000998:	409a      	lsls	r2, r3
 800099a:	0013      	movs	r3, r2
 800099c:	43da      	mvns	r2, r3
 800099e:	693b      	ldr	r3, [r7, #16]
 80009a0:	4013      	ands	r3, r2
 80009a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80009a4:	687a      	ldr	r2, [r7, #4]
 80009a6:	2390      	movs	r3, #144	; 0x90
 80009a8:	05db      	lsls	r3, r3, #23
 80009aa:	429a      	cmp	r2, r3
 80009ac:	d013      	beq.n	80009d6 <HAL_GPIO_Init+0x1e2>
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	4a44      	ldr	r2, [pc, #272]	; (8000ac4 <HAL_GPIO_Init+0x2d0>)
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d00d      	beq.n	80009d2 <HAL_GPIO_Init+0x1de>
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	4a43      	ldr	r2, [pc, #268]	; (8000ac8 <HAL_GPIO_Init+0x2d4>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d007      	beq.n	80009ce <HAL_GPIO_Init+0x1da>
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	4a42      	ldr	r2, [pc, #264]	; (8000acc <HAL_GPIO_Init+0x2d8>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d101      	bne.n	80009ca <HAL_GPIO_Init+0x1d6>
 80009c6:	2303      	movs	r3, #3
 80009c8:	e006      	b.n	80009d8 <HAL_GPIO_Init+0x1e4>
 80009ca:	2305      	movs	r3, #5
 80009cc:	e004      	b.n	80009d8 <HAL_GPIO_Init+0x1e4>
 80009ce:	2302      	movs	r3, #2
 80009d0:	e002      	b.n	80009d8 <HAL_GPIO_Init+0x1e4>
 80009d2:	2301      	movs	r3, #1
 80009d4:	e000      	b.n	80009d8 <HAL_GPIO_Init+0x1e4>
 80009d6:	2300      	movs	r3, #0
 80009d8:	697a      	ldr	r2, [r7, #20]
 80009da:	2103      	movs	r1, #3
 80009dc:	400a      	ands	r2, r1
 80009de:	0092      	lsls	r2, r2, #2
 80009e0:	4093      	lsls	r3, r2
 80009e2:	693a      	ldr	r2, [r7, #16]
 80009e4:	4313      	orrs	r3, r2
 80009e6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80009e8:	4935      	ldr	r1, [pc, #212]	; (8000ac0 <HAL_GPIO_Init+0x2cc>)
 80009ea:	697b      	ldr	r3, [r7, #20]
 80009ec:	089b      	lsrs	r3, r3, #2
 80009ee:	3302      	adds	r3, #2
 80009f0:	009b      	lsls	r3, r3, #2
 80009f2:	693a      	ldr	r2, [r7, #16]
 80009f4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80009f6:	4b36      	ldr	r3, [pc, #216]	; (8000ad0 <HAL_GPIO_Init+0x2dc>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	43da      	mvns	r2, r3
 8000a00:	693b      	ldr	r3, [r7, #16]
 8000a02:	4013      	ands	r3, r2
 8000a04:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	685a      	ldr	r2, [r3, #4]
 8000a0a:	2380      	movs	r3, #128	; 0x80
 8000a0c:	025b      	lsls	r3, r3, #9
 8000a0e:	4013      	ands	r3, r2
 8000a10:	d003      	beq.n	8000a1a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000a12:	693a      	ldr	r2, [r7, #16]
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	4313      	orrs	r3, r2
 8000a18:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000a1a:	4b2d      	ldr	r3, [pc, #180]	; (8000ad0 <HAL_GPIO_Init+0x2dc>)
 8000a1c:	693a      	ldr	r2, [r7, #16]
 8000a1e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000a20:	4b2b      	ldr	r3, [pc, #172]	; (8000ad0 <HAL_GPIO_Init+0x2dc>)
 8000a22:	685b      	ldr	r3, [r3, #4]
 8000a24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	43da      	mvns	r2, r3
 8000a2a:	693b      	ldr	r3, [r7, #16]
 8000a2c:	4013      	ands	r3, r2
 8000a2e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	685a      	ldr	r2, [r3, #4]
 8000a34:	2380      	movs	r3, #128	; 0x80
 8000a36:	029b      	lsls	r3, r3, #10
 8000a38:	4013      	ands	r3, r2
 8000a3a:	d003      	beq.n	8000a44 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000a3c:	693a      	ldr	r2, [r7, #16]
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	4313      	orrs	r3, r2
 8000a42:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000a44:	4b22      	ldr	r3, [pc, #136]	; (8000ad0 <HAL_GPIO_Init+0x2dc>)
 8000a46:	693a      	ldr	r2, [r7, #16]
 8000a48:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a4a:	4b21      	ldr	r3, [pc, #132]	; (8000ad0 <HAL_GPIO_Init+0x2dc>)
 8000a4c:	689b      	ldr	r3, [r3, #8]
 8000a4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	43da      	mvns	r2, r3
 8000a54:	693b      	ldr	r3, [r7, #16]
 8000a56:	4013      	ands	r3, r2
 8000a58:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	685a      	ldr	r2, [r3, #4]
 8000a5e:	2380      	movs	r3, #128	; 0x80
 8000a60:	035b      	lsls	r3, r3, #13
 8000a62:	4013      	ands	r3, r2
 8000a64:	d003      	beq.n	8000a6e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000a66:	693a      	ldr	r2, [r7, #16]
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	4313      	orrs	r3, r2
 8000a6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000a6e:	4b18      	ldr	r3, [pc, #96]	; (8000ad0 <HAL_GPIO_Init+0x2dc>)
 8000a70:	693a      	ldr	r2, [r7, #16]
 8000a72:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000a74:	4b16      	ldr	r3, [pc, #88]	; (8000ad0 <HAL_GPIO_Init+0x2dc>)
 8000a76:	68db      	ldr	r3, [r3, #12]
 8000a78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	43da      	mvns	r2, r3
 8000a7e:	693b      	ldr	r3, [r7, #16]
 8000a80:	4013      	ands	r3, r2
 8000a82:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	685a      	ldr	r2, [r3, #4]
 8000a88:	2380      	movs	r3, #128	; 0x80
 8000a8a:	039b      	lsls	r3, r3, #14
 8000a8c:	4013      	ands	r3, r2
 8000a8e:	d003      	beq.n	8000a98 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000a90:	693a      	ldr	r2, [r7, #16]
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	4313      	orrs	r3, r2
 8000a96:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000a98:	4b0d      	ldr	r3, [pc, #52]	; (8000ad0 <HAL_GPIO_Init+0x2dc>)
 8000a9a:	693a      	ldr	r2, [r7, #16]
 8000a9c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000a9e:	697b      	ldr	r3, [r7, #20]
 8000aa0:	3301      	adds	r3, #1
 8000aa2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	681a      	ldr	r2, [r3, #0]
 8000aa8:	697b      	ldr	r3, [r7, #20]
 8000aaa:	40da      	lsrs	r2, r3
 8000aac:	1e13      	subs	r3, r2, #0
 8000aae:	d000      	beq.n	8000ab2 <HAL_GPIO_Init+0x2be>
 8000ab0:	e6a8      	b.n	8000804 <HAL_GPIO_Init+0x10>
  } 
}
 8000ab2:	46c0      	nop			; (mov r8, r8)
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	b006      	add	sp, #24
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	46c0      	nop			; (mov r8, r8)
 8000abc:	40021000 	.word	0x40021000
 8000ac0:	40010000 	.word	0x40010000
 8000ac4:	48000400 	.word	0x48000400
 8000ac8:	48000800 	.word	0x48000800
 8000acc:	48000c00 	.word	0x48000c00
 8000ad0:	40010400 	.word	0x40010400

08000ad4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b088      	sub	sp, #32
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d101      	bne.n	8000ae6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	e303      	b.n	80010ee <HAL_RCC_OscConfig+0x61a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	2201      	movs	r2, #1
 8000aec:	4013      	ands	r3, r2
 8000aee:	d100      	bne.n	8000af2 <HAL_RCC_OscConfig+0x1e>
 8000af0:	e08d      	b.n	8000c0e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000af2:	4bc4      	ldr	r3, [pc, #784]	; (8000e04 <HAL_RCC_OscConfig+0x330>)
 8000af4:	685b      	ldr	r3, [r3, #4]
 8000af6:	220c      	movs	r2, #12
 8000af8:	4013      	ands	r3, r2
 8000afa:	2b04      	cmp	r3, #4
 8000afc:	d00e      	beq.n	8000b1c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000afe:	4bc1      	ldr	r3, [pc, #772]	; (8000e04 <HAL_RCC_OscConfig+0x330>)
 8000b00:	685b      	ldr	r3, [r3, #4]
 8000b02:	220c      	movs	r2, #12
 8000b04:	4013      	ands	r3, r2
 8000b06:	2b08      	cmp	r3, #8
 8000b08:	d116      	bne.n	8000b38 <HAL_RCC_OscConfig+0x64>
 8000b0a:	4bbe      	ldr	r3, [pc, #760]	; (8000e04 <HAL_RCC_OscConfig+0x330>)
 8000b0c:	685a      	ldr	r2, [r3, #4]
 8000b0e:	2380      	movs	r3, #128	; 0x80
 8000b10:	025b      	lsls	r3, r3, #9
 8000b12:	401a      	ands	r2, r3
 8000b14:	2380      	movs	r3, #128	; 0x80
 8000b16:	025b      	lsls	r3, r3, #9
 8000b18:	429a      	cmp	r2, r3
 8000b1a:	d10d      	bne.n	8000b38 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b1c:	4bb9      	ldr	r3, [pc, #740]	; (8000e04 <HAL_RCC_OscConfig+0x330>)
 8000b1e:	681a      	ldr	r2, [r3, #0]
 8000b20:	2380      	movs	r3, #128	; 0x80
 8000b22:	029b      	lsls	r3, r3, #10
 8000b24:	4013      	ands	r3, r2
 8000b26:	d100      	bne.n	8000b2a <HAL_RCC_OscConfig+0x56>
 8000b28:	e070      	b.n	8000c0c <HAL_RCC_OscConfig+0x138>
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	685b      	ldr	r3, [r3, #4]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d000      	beq.n	8000b34 <HAL_RCC_OscConfig+0x60>
 8000b32:	e06b      	b.n	8000c0c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8000b34:	2301      	movs	r3, #1
 8000b36:	e2da      	b.n	80010ee <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	685b      	ldr	r3, [r3, #4]
 8000b3c:	2b01      	cmp	r3, #1
 8000b3e:	d107      	bne.n	8000b50 <HAL_RCC_OscConfig+0x7c>
 8000b40:	4bb0      	ldr	r3, [pc, #704]	; (8000e04 <HAL_RCC_OscConfig+0x330>)
 8000b42:	681a      	ldr	r2, [r3, #0]
 8000b44:	4baf      	ldr	r3, [pc, #700]	; (8000e04 <HAL_RCC_OscConfig+0x330>)
 8000b46:	2180      	movs	r1, #128	; 0x80
 8000b48:	0249      	lsls	r1, r1, #9
 8000b4a:	430a      	orrs	r2, r1
 8000b4c:	601a      	str	r2, [r3, #0]
 8000b4e:	e02f      	b.n	8000bb0 <HAL_RCC_OscConfig+0xdc>
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	685b      	ldr	r3, [r3, #4]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d10c      	bne.n	8000b72 <HAL_RCC_OscConfig+0x9e>
 8000b58:	4baa      	ldr	r3, [pc, #680]	; (8000e04 <HAL_RCC_OscConfig+0x330>)
 8000b5a:	681a      	ldr	r2, [r3, #0]
 8000b5c:	4ba9      	ldr	r3, [pc, #676]	; (8000e04 <HAL_RCC_OscConfig+0x330>)
 8000b5e:	49aa      	ldr	r1, [pc, #680]	; (8000e08 <HAL_RCC_OscConfig+0x334>)
 8000b60:	400a      	ands	r2, r1
 8000b62:	601a      	str	r2, [r3, #0]
 8000b64:	4ba7      	ldr	r3, [pc, #668]	; (8000e04 <HAL_RCC_OscConfig+0x330>)
 8000b66:	681a      	ldr	r2, [r3, #0]
 8000b68:	4ba6      	ldr	r3, [pc, #664]	; (8000e04 <HAL_RCC_OscConfig+0x330>)
 8000b6a:	49a8      	ldr	r1, [pc, #672]	; (8000e0c <HAL_RCC_OscConfig+0x338>)
 8000b6c:	400a      	ands	r2, r1
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	e01e      	b.n	8000bb0 <HAL_RCC_OscConfig+0xdc>
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	685b      	ldr	r3, [r3, #4]
 8000b76:	2b05      	cmp	r3, #5
 8000b78:	d10e      	bne.n	8000b98 <HAL_RCC_OscConfig+0xc4>
 8000b7a:	4ba2      	ldr	r3, [pc, #648]	; (8000e04 <HAL_RCC_OscConfig+0x330>)
 8000b7c:	681a      	ldr	r2, [r3, #0]
 8000b7e:	4ba1      	ldr	r3, [pc, #644]	; (8000e04 <HAL_RCC_OscConfig+0x330>)
 8000b80:	2180      	movs	r1, #128	; 0x80
 8000b82:	02c9      	lsls	r1, r1, #11
 8000b84:	430a      	orrs	r2, r1
 8000b86:	601a      	str	r2, [r3, #0]
 8000b88:	4b9e      	ldr	r3, [pc, #632]	; (8000e04 <HAL_RCC_OscConfig+0x330>)
 8000b8a:	681a      	ldr	r2, [r3, #0]
 8000b8c:	4b9d      	ldr	r3, [pc, #628]	; (8000e04 <HAL_RCC_OscConfig+0x330>)
 8000b8e:	2180      	movs	r1, #128	; 0x80
 8000b90:	0249      	lsls	r1, r1, #9
 8000b92:	430a      	orrs	r2, r1
 8000b94:	601a      	str	r2, [r3, #0]
 8000b96:	e00b      	b.n	8000bb0 <HAL_RCC_OscConfig+0xdc>
 8000b98:	4b9a      	ldr	r3, [pc, #616]	; (8000e04 <HAL_RCC_OscConfig+0x330>)
 8000b9a:	681a      	ldr	r2, [r3, #0]
 8000b9c:	4b99      	ldr	r3, [pc, #612]	; (8000e04 <HAL_RCC_OscConfig+0x330>)
 8000b9e:	499a      	ldr	r1, [pc, #616]	; (8000e08 <HAL_RCC_OscConfig+0x334>)
 8000ba0:	400a      	ands	r2, r1
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	4b97      	ldr	r3, [pc, #604]	; (8000e04 <HAL_RCC_OscConfig+0x330>)
 8000ba6:	681a      	ldr	r2, [r3, #0]
 8000ba8:	4b96      	ldr	r3, [pc, #600]	; (8000e04 <HAL_RCC_OscConfig+0x330>)
 8000baa:	4998      	ldr	r1, [pc, #608]	; (8000e0c <HAL_RCC_OscConfig+0x338>)
 8000bac:	400a      	ands	r2, r1
 8000bae:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	685b      	ldr	r3, [r3, #4]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d014      	beq.n	8000be2 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bb8:	f7ff fd34 	bl	8000624 <HAL_GetTick>
 8000bbc:	0003      	movs	r3, r0
 8000bbe:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bc0:	e008      	b.n	8000bd4 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000bc2:	f7ff fd2f 	bl	8000624 <HAL_GetTick>
 8000bc6:	0002      	movs	r2, r0
 8000bc8:	69bb      	ldr	r3, [r7, #24]
 8000bca:	1ad3      	subs	r3, r2, r3
 8000bcc:	2b64      	cmp	r3, #100	; 0x64
 8000bce:	d901      	bls.n	8000bd4 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8000bd0:	2303      	movs	r3, #3
 8000bd2:	e28c      	b.n	80010ee <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bd4:	4b8b      	ldr	r3, [pc, #556]	; (8000e04 <HAL_RCC_OscConfig+0x330>)
 8000bd6:	681a      	ldr	r2, [r3, #0]
 8000bd8:	2380      	movs	r3, #128	; 0x80
 8000bda:	029b      	lsls	r3, r3, #10
 8000bdc:	4013      	ands	r3, r2
 8000bde:	d0f0      	beq.n	8000bc2 <HAL_RCC_OscConfig+0xee>
 8000be0:	e015      	b.n	8000c0e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000be2:	f7ff fd1f 	bl	8000624 <HAL_GetTick>
 8000be6:	0003      	movs	r3, r0
 8000be8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000bea:	e008      	b.n	8000bfe <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000bec:	f7ff fd1a 	bl	8000624 <HAL_GetTick>
 8000bf0:	0002      	movs	r2, r0
 8000bf2:	69bb      	ldr	r3, [r7, #24]
 8000bf4:	1ad3      	subs	r3, r2, r3
 8000bf6:	2b64      	cmp	r3, #100	; 0x64
 8000bf8:	d901      	bls.n	8000bfe <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8000bfa:	2303      	movs	r3, #3
 8000bfc:	e277      	b.n	80010ee <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000bfe:	4b81      	ldr	r3, [pc, #516]	; (8000e04 <HAL_RCC_OscConfig+0x330>)
 8000c00:	681a      	ldr	r2, [r3, #0]
 8000c02:	2380      	movs	r3, #128	; 0x80
 8000c04:	029b      	lsls	r3, r3, #10
 8000c06:	4013      	ands	r3, r2
 8000c08:	d1f0      	bne.n	8000bec <HAL_RCC_OscConfig+0x118>
 8000c0a:	e000      	b.n	8000c0e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c0c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	2202      	movs	r2, #2
 8000c14:	4013      	ands	r3, r2
 8000c16:	d100      	bne.n	8000c1a <HAL_RCC_OscConfig+0x146>
 8000c18:	e069      	b.n	8000cee <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000c1a:	4b7a      	ldr	r3, [pc, #488]	; (8000e04 <HAL_RCC_OscConfig+0x330>)
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	220c      	movs	r2, #12
 8000c20:	4013      	ands	r3, r2
 8000c22:	d00b      	beq.n	8000c3c <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000c24:	4b77      	ldr	r3, [pc, #476]	; (8000e04 <HAL_RCC_OscConfig+0x330>)
 8000c26:	685b      	ldr	r3, [r3, #4]
 8000c28:	220c      	movs	r2, #12
 8000c2a:	4013      	ands	r3, r2
 8000c2c:	2b08      	cmp	r3, #8
 8000c2e:	d11c      	bne.n	8000c6a <HAL_RCC_OscConfig+0x196>
 8000c30:	4b74      	ldr	r3, [pc, #464]	; (8000e04 <HAL_RCC_OscConfig+0x330>)
 8000c32:	685a      	ldr	r2, [r3, #4]
 8000c34:	2380      	movs	r3, #128	; 0x80
 8000c36:	025b      	lsls	r3, r3, #9
 8000c38:	4013      	ands	r3, r2
 8000c3a:	d116      	bne.n	8000c6a <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c3c:	4b71      	ldr	r3, [pc, #452]	; (8000e04 <HAL_RCC_OscConfig+0x330>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	2202      	movs	r2, #2
 8000c42:	4013      	ands	r3, r2
 8000c44:	d005      	beq.n	8000c52 <HAL_RCC_OscConfig+0x17e>
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	68db      	ldr	r3, [r3, #12]
 8000c4a:	2b01      	cmp	r3, #1
 8000c4c:	d001      	beq.n	8000c52 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	e24d      	b.n	80010ee <HAL_RCC_OscConfig+0x61a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c52:	4b6c      	ldr	r3, [pc, #432]	; (8000e04 <HAL_RCC_OscConfig+0x330>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	22f8      	movs	r2, #248	; 0xf8
 8000c58:	4393      	bics	r3, r2
 8000c5a:	0019      	movs	r1, r3
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	691b      	ldr	r3, [r3, #16]
 8000c60:	00da      	lsls	r2, r3, #3
 8000c62:	4b68      	ldr	r3, [pc, #416]	; (8000e04 <HAL_RCC_OscConfig+0x330>)
 8000c64:	430a      	orrs	r2, r1
 8000c66:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c68:	e041      	b.n	8000cee <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	68db      	ldr	r3, [r3, #12]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d024      	beq.n	8000cbc <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000c72:	4b64      	ldr	r3, [pc, #400]	; (8000e04 <HAL_RCC_OscConfig+0x330>)
 8000c74:	681a      	ldr	r2, [r3, #0]
 8000c76:	4b63      	ldr	r3, [pc, #396]	; (8000e04 <HAL_RCC_OscConfig+0x330>)
 8000c78:	2101      	movs	r1, #1
 8000c7a:	430a      	orrs	r2, r1
 8000c7c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c7e:	f7ff fcd1 	bl	8000624 <HAL_GetTick>
 8000c82:	0003      	movs	r3, r0
 8000c84:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c86:	e008      	b.n	8000c9a <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c88:	f7ff fccc 	bl	8000624 <HAL_GetTick>
 8000c8c:	0002      	movs	r2, r0
 8000c8e:	69bb      	ldr	r3, [r7, #24]
 8000c90:	1ad3      	subs	r3, r2, r3
 8000c92:	2b02      	cmp	r3, #2
 8000c94:	d901      	bls.n	8000c9a <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8000c96:	2303      	movs	r3, #3
 8000c98:	e229      	b.n	80010ee <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c9a:	4b5a      	ldr	r3, [pc, #360]	; (8000e04 <HAL_RCC_OscConfig+0x330>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	2202      	movs	r2, #2
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	d0f1      	beq.n	8000c88 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ca4:	4b57      	ldr	r3, [pc, #348]	; (8000e04 <HAL_RCC_OscConfig+0x330>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	22f8      	movs	r2, #248	; 0xf8
 8000caa:	4393      	bics	r3, r2
 8000cac:	0019      	movs	r1, r3
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	691b      	ldr	r3, [r3, #16]
 8000cb2:	00da      	lsls	r2, r3, #3
 8000cb4:	4b53      	ldr	r3, [pc, #332]	; (8000e04 <HAL_RCC_OscConfig+0x330>)
 8000cb6:	430a      	orrs	r2, r1
 8000cb8:	601a      	str	r2, [r3, #0]
 8000cba:	e018      	b.n	8000cee <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000cbc:	4b51      	ldr	r3, [pc, #324]	; (8000e04 <HAL_RCC_OscConfig+0x330>)
 8000cbe:	681a      	ldr	r2, [r3, #0]
 8000cc0:	4b50      	ldr	r3, [pc, #320]	; (8000e04 <HAL_RCC_OscConfig+0x330>)
 8000cc2:	2101      	movs	r1, #1
 8000cc4:	438a      	bics	r2, r1
 8000cc6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cc8:	f7ff fcac 	bl	8000624 <HAL_GetTick>
 8000ccc:	0003      	movs	r3, r0
 8000cce:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000cd0:	e008      	b.n	8000ce4 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000cd2:	f7ff fca7 	bl	8000624 <HAL_GetTick>
 8000cd6:	0002      	movs	r2, r0
 8000cd8:	69bb      	ldr	r3, [r7, #24]
 8000cda:	1ad3      	subs	r3, r2, r3
 8000cdc:	2b02      	cmp	r3, #2
 8000cde:	d901      	bls.n	8000ce4 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8000ce0:	2303      	movs	r3, #3
 8000ce2:	e204      	b.n	80010ee <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ce4:	4b47      	ldr	r3, [pc, #284]	; (8000e04 <HAL_RCC_OscConfig+0x330>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	2202      	movs	r2, #2
 8000cea:	4013      	ands	r3, r2
 8000cec:	d1f1      	bne.n	8000cd2 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	2208      	movs	r2, #8
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	d036      	beq.n	8000d66 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	69db      	ldr	r3, [r3, #28]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d019      	beq.n	8000d34 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d00:	4b40      	ldr	r3, [pc, #256]	; (8000e04 <HAL_RCC_OscConfig+0x330>)
 8000d02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d04:	4b3f      	ldr	r3, [pc, #252]	; (8000e04 <HAL_RCC_OscConfig+0x330>)
 8000d06:	2101      	movs	r1, #1
 8000d08:	430a      	orrs	r2, r1
 8000d0a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d0c:	f7ff fc8a 	bl	8000624 <HAL_GetTick>
 8000d10:	0003      	movs	r3, r0
 8000d12:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d14:	e008      	b.n	8000d28 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d16:	f7ff fc85 	bl	8000624 <HAL_GetTick>
 8000d1a:	0002      	movs	r2, r0
 8000d1c:	69bb      	ldr	r3, [r7, #24]
 8000d1e:	1ad3      	subs	r3, r2, r3
 8000d20:	2b02      	cmp	r3, #2
 8000d22:	d901      	bls.n	8000d28 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8000d24:	2303      	movs	r3, #3
 8000d26:	e1e2      	b.n	80010ee <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d28:	4b36      	ldr	r3, [pc, #216]	; (8000e04 <HAL_RCC_OscConfig+0x330>)
 8000d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d2c:	2202      	movs	r2, #2
 8000d2e:	4013      	ands	r3, r2
 8000d30:	d0f1      	beq.n	8000d16 <HAL_RCC_OscConfig+0x242>
 8000d32:	e018      	b.n	8000d66 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d34:	4b33      	ldr	r3, [pc, #204]	; (8000e04 <HAL_RCC_OscConfig+0x330>)
 8000d36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d38:	4b32      	ldr	r3, [pc, #200]	; (8000e04 <HAL_RCC_OscConfig+0x330>)
 8000d3a:	2101      	movs	r1, #1
 8000d3c:	438a      	bics	r2, r1
 8000d3e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d40:	f7ff fc70 	bl	8000624 <HAL_GetTick>
 8000d44:	0003      	movs	r3, r0
 8000d46:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d48:	e008      	b.n	8000d5c <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d4a:	f7ff fc6b 	bl	8000624 <HAL_GetTick>
 8000d4e:	0002      	movs	r2, r0
 8000d50:	69bb      	ldr	r3, [r7, #24]
 8000d52:	1ad3      	subs	r3, r2, r3
 8000d54:	2b02      	cmp	r3, #2
 8000d56:	d901      	bls.n	8000d5c <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8000d58:	2303      	movs	r3, #3
 8000d5a:	e1c8      	b.n	80010ee <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000d5c:	4b29      	ldr	r3, [pc, #164]	; (8000e04 <HAL_RCC_OscConfig+0x330>)
 8000d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d60:	2202      	movs	r2, #2
 8000d62:	4013      	ands	r3, r2
 8000d64:	d1f1      	bne.n	8000d4a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	2204      	movs	r2, #4
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	d100      	bne.n	8000d72 <HAL_RCC_OscConfig+0x29e>
 8000d70:	e0b6      	b.n	8000ee0 <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000d72:	231f      	movs	r3, #31
 8000d74:	18fb      	adds	r3, r7, r3
 8000d76:	2200      	movs	r2, #0
 8000d78:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d7a:	4b22      	ldr	r3, [pc, #136]	; (8000e04 <HAL_RCC_OscConfig+0x330>)
 8000d7c:	69da      	ldr	r2, [r3, #28]
 8000d7e:	2380      	movs	r3, #128	; 0x80
 8000d80:	055b      	lsls	r3, r3, #21
 8000d82:	4013      	ands	r3, r2
 8000d84:	d111      	bne.n	8000daa <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d86:	4b1f      	ldr	r3, [pc, #124]	; (8000e04 <HAL_RCC_OscConfig+0x330>)
 8000d88:	69da      	ldr	r2, [r3, #28]
 8000d8a:	4b1e      	ldr	r3, [pc, #120]	; (8000e04 <HAL_RCC_OscConfig+0x330>)
 8000d8c:	2180      	movs	r1, #128	; 0x80
 8000d8e:	0549      	lsls	r1, r1, #21
 8000d90:	430a      	orrs	r2, r1
 8000d92:	61da      	str	r2, [r3, #28]
 8000d94:	4b1b      	ldr	r3, [pc, #108]	; (8000e04 <HAL_RCC_OscConfig+0x330>)
 8000d96:	69da      	ldr	r2, [r3, #28]
 8000d98:	2380      	movs	r3, #128	; 0x80
 8000d9a:	055b      	lsls	r3, r3, #21
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	60fb      	str	r3, [r7, #12]
 8000da0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000da2:	231f      	movs	r3, #31
 8000da4:	18fb      	adds	r3, r7, r3
 8000da6:	2201      	movs	r2, #1
 8000da8:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000daa:	4b19      	ldr	r3, [pc, #100]	; (8000e10 <HAL_RCC_OscConfig+0x33c>)
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	2380      	movs	r3, #128	; 0x80
 8000db0:	005b      	lsls	r3, r3, #1
 8000db2:	4013      	ands	r3, r2
 8000db4:	d11a      	bne.n	8000dec <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000db6:	4b16      	ldr	r3, [pc, #88]	; (8000e10 <HAL_RCC_OscConfig+0x33c>)
 8000db8:	681a      	ldr	r2, [r3, #0]
 8000dba:	4b15      	ldr	r3, [pc, #84]	; (8000e10 <HAL_RCC_OscConfig+0x33c>)
 8000dbc:	2180      	movs	r1, #128	; 0x80
 8000dbe:	0049      	lsls	r1, r1, #1
 8000dc0:	430a      	orrs	r2, r1
 8000dc2:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000dc4:	f7ff fc2e 	bl	8000624 <HAL_GetTick>
 8000dc8:	0003      	movs	r3, r0
 8000dca:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000dcc:	e008      	b.n	8000de0 <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000dce:	f7ff fc29 	bl	8000624 <HAL_GetTick>
 8000dd2:	0002      	movs	r2, r0
 8000dd4:	69bb      	ldr	r3, [r7, #24]
 8000dd6:	1ad3      	subs	r3, r2, r3
 8000dd8:	2b64      	cmp	r3, #100	; 0x64
 8000dda:	d901      	bls.n	8000de0 <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 8000ddc:	2303      	movs	r3, #3
 8000dde:	e186      	b.n	80010ee <HAL_RCC_OscConfig+0x61a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000de0:	4b0b      	ldr	r3, [pc, #44]	; (8000e10 <HAL_RCC_OscConfig+0x33c>)
 8000de2:	681a      	ldr	r2, [r3, #0]
 8000de4:	2380      	movs	r3, #128	; 0x80
 8000de6:	005b      	lsls	r3, r3, #1
 8000de8:	4013      	ands	r3, r2
 8000dea:	d0f0      	beq.n	8000dce <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	689b      	ldr	r3, [r3, #8]
 8000df0:	2b01      	cmp	r3, #1
 8000df2:	d10f      	bne.n	8000e14 <HAL_RCC_OscConfig+0x340>
 8000df4:	4b03      	ldr	r3, [pc, #12]	; (8000e04 <HAL_RCC_OscConfig+0x330>)
 8000df6:	6a1a      	ldr	r2, [r3, #32]
 8000df8:	4b02      	ldr	r3, [pc, #8]	; (8000e04 <HAL_RCC_OscConfig+0x330>)
 8000dfa:	2101      	movs	r1, #1
 8000dfc:	430a      	orrs	r2, r1
 8000dfe:	621a      	str	r2, [r3, #32]
 8000e00:	e036      	b.n	8000e70 <HAL_RCC_OscConfig+0x39c>
 8000e02:	46c0      	nop			; (mov r8, r8)
 8000e04:	40021000 	.word	0x40021000
 8000e08:	fffeffff 	.word	0xfffeffff
 8000e0c:	fffbffff 	.word	0xfffbffff
 8000e10:	40007000 	.word	0x40007000
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	689b      	ldr	r3, [r3, #8]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d10c      	bne.n	8000e36 <HAL_RCC_OscConfig+0x362>
 8000e1c:	4bb6      	ldr	r3, [pc, #728]	; (80010f8 <HAL_RCC_OscConfig+0x624>)
 8000e1e:	6a1a      	ldr	r2, [r3, #32]
 8000e20:	4bb5      	ldr	r3, [pc, #724]	; (80010f8 <HAL_RCC_OscConfig+0x624>)
 8000e22:	2101      	movs	r1, #1
 8000e24:	438a      	bics	r2, r1
 8000e26:	621a      	str	r2, [r3, #32]
 8000e28:	4bb3      	ldr	r3, [pc, #716]	; (80010f8 <HAL_RCC_OscConfig+0x624>)
 8000e2a:	6a1a      	ldr	r2, [r3, #32]
 8000e2c:	4bb2      	ldr	r3, [pc, #712]	; (80010f8 <HAL_RCC_OscConfig+0x624>)
 8000e2e:	2104      	movs	r1, #4
 8000e30:	438a      	bics	r2, r1
 8000e32:	621a      	str	r2, [r3, #32]
 8000e34:	e01c      	b.n	8000e70 <HAL_RCC_OscConfig+0x39c>
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	689b      	ldr	r3, [r3, #8]
 8000e3a:	2b05      	cmp	r3, #5
 8000e3c:	d10c      	bne.n	8000e58 <HAL_RCC_OscConfig+0x384>
 8000e3e:	4bae      	ldr	r3, [pc, #696]	; (80010f8 <HAL_RCC_OscConfig+0x624>)
 8000e40:	6a1a      	ldr	r2, [r3, #32]
 8000e42:	4bad      	ldr	r3, [pc, #692]	; (80010f8 <HAL_RCC_OscConfig+0x624>)
 8000e44:	2104      	movs	r1, #4
 8000e46:	430a      	orrs	r2, r1
 8000e48:	621a      	str	r2, [r3, #32]
 8000e4a:	4bab      	ldr	r3, [pc, #684]	; (80010f8 <HAL_RCC_OscConfig+0x624>)
 8000e4c:	6a1a      	ldr	r2, [r3, #32]
 8000e4e:	4baa      	ldr	r3, [pc, #680]	; (80010f8 <HAL_RCC_OscConfig+0x624>)
 8000e50:	2101      	movs	r1, #1
 8000e52:	430a      	orrs	r2, r1
 8000e54:	621a      	str	r2, [r3, #32]
 8000e56:	e00b      	b.n	8000e70 <HAL_RCC_OscConfig+0x39c>
 8000e58:	4ba7      	ldr	r3, [pc, #668]	; (80010f8 <HAL_RCC_OscConfig+0x624>)
 8000e5a:	6a1a      	ldr	r2, [r3, #32]
 8000e5c:	4ba6      	ldr	r3, [pc, #664]	; (80010f8 <HAL_RCC_OscConfig+0x624>)
 8000e5e:	2101      	movs	r1, #1
 8000e60:	438a      	bics	r2, r1
 8000e62:	621a      	str	r2, [r3, #32]
 8000e64:	4ba4      	ldr	r3, [pc, #656]	; (80010f8 <HAL_RCC_OscConfig+0x624>)
 8000e66:	6a1a      	ldr	r2, [r3, #32]
 8000e68:	4ba3      	ldr	r3, [pc, #652]	; (80010f8 <HAL_RCC_OscConfig+0x624>)
 8000e6a:	2104      	movs	r1, #4
 8000e6c:	438a      	bics	r2, r1
 8000e6e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	689b      	ldr	r3, [r3, #8]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d014      	beq.n	8000ea2 <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e78:	f7ff fbd4 	bl	8000624 <HAL_GetTick>
 8000e7c:	0003      	movs	r3, r0
 8000e7e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e80:	e009      	b.n	8000e96 <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e82:	f7ff fbcf 	bl	8000624 <HAL_GetTick>
 8000e86:	0002      	movs	r2, r0
 8000e88:	69bb      	ldr	r3, [r7, #24]
 8000e8a:	1ad3      	subs	r3, r2, r3
 8000e8c:	4a9b      	ldr	r2, [pc, #620]	; (80010fc <HAL_RCC_OscConfig+0x628>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d901      	bls.n	8000e96 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8000e92:	2303      	movs	r3, #3
 8000e94:	e12b      	b.n	80010ee <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e96:	4b98      	ldr	r3, [pc, #608]	; (80010f8 <HAL_RCC_OscConfig+0x624>)
 8000e98:	6a1b      	ldr	r3, [r3, #32]
 8000e9a:	2202      	movs	r2, #2
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	d0f0      	beq.n	8000e82 <HAL_RCC_OscConfig+0x3ae>
 8000ea0:	e013      	b.n	8000eca <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ea2:	f7ff fbbf 	bl	8000624 <HAL_GetTick>
 8000ea6:	0003      	movs	r3, r0
 8000ea8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000eaa:	e009      	b.n	8000ec0 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000eac:	f7ff fbba 	bl	8000624 <HAL_GetTick>
 8000eb0:	0002      	movs	r2, r0
 8000eb2:	69bb      	ldr	r3, [r7, #24]
 8000eb4:	1ad3      	subs	r3, r2, r3
 8000eb6:	4a91      	ldr	r2, [pc, #580]	; (80010fc <HAL_RCC_OscConfig+0x628>)
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d901      	bls.n	8000ec0 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8000ebc:	2303      	movs	r3, #3
 8000ebe:	e116      	b.n	80010ee <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ec0:	4b8d      	ldr	r3, [pc, #564]	; (80010f8 <HAL_RCC_OscConfig+0x624>)
 8000ec2:	6a1b      	ldr	r3, [r3, #32]
 8000ec4:	2202      	movs	r2, #2
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	d1f0      	bne.n	8000eac <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000eca:	231f      	movs	r3, #31
 8000ecc:	18fb      	adds	r3, r7, r3
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	2b01      	cmp	r3, #1
 8000ed2:	d105      	bne.n	8000ee0 <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ed4:	4b88      	ldr	r3, [pc, #544]	; (80010f8 <HAL_RCC_OscConfig+0x624>)
 8000ed6:	69da      	ldr	r2, [r3, #28]
 8000ed8:	4b87      	ldr	r3, [pc, #540]	; (80010f8 <HAL_RCC_OscConfig+0x624>)
 8000eda:	4989      	ldr	r1, [pc, #548]	; (8001100 <HAL_RCC_OscConfig+0x62c>)
 8000edc:	400a      	ands	r2, r1
 8000ede:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	2210      	movs	r2, #16
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	d063      	beq.n	8000fb2 <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	695b      	ldr	r3, [r3, #20]
 8000eee:	2b01      	cmp	r3, #1
 8000ef0:	d12a      	bne.n	8000f48 <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000ef2:	4b81      	ldr	r3, [pc, #516]	; (80010f8 <HAL_RCC_OscConfig+0x624>)
 8000ef4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ef6:	4b80      	ldr	r3, [pc, #512]	; (80010f8 <HAL_RCC_OscConfig+0x624>)
 8000ef8:	2104      	movs	r1, #4
 8000efa:	430a      	orrs	r2, r1
 8000efc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8000efe:	4b7e      	ldr	r3, [pc, #504]	; (80010f8 <HAL_RCC_OscConfig+0x624>)
 8000f00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f02:	4b7d      	ldr	r3, [pc, #500]	; (80010f8 <HAL_RCC_OscConfig+0x624>)
 8000f04:	2101      	movs	r1, #1
 8000f06:	430a      	orrs	r2, r1
 8000f08:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f0a:	f7ff fb8b 	bl	8000624 <HAL_GetTick>
 8000f0e:	0003      	movs	r3, r0
 8000f10:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000f12:	e008      	b.n	8000f26 <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000f14:	f7ff fb86 	bl	8000624 <HAL_GetTick>
 8000f18:	0002      	movs	r2, r0
 8000f1a:	69bb      	ldr	r3, [r7, #24]
 8000f1c:	1ad3      	subs	r3, r2, r3
 8000f1e:	2b02      	cmp	r3, #2
 8000f20:	d901      	bls.n	8000f26 <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 8000f22:	2303      	movs	r3, #3
 8000f24:	e0e3      	b.n	80010ee <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000f26:	4b74      	ldr	r3, [pc, #464]	; (80010f8 <HAL_RCC_OscConfig+0x624>)
 8000f28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f2a:	2202      	movs	r2, #2
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	d0f1      	beq.n	8000f14 <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000f30:	4b71      	ldr	r3, [pc, #452]	; (80010f8 <HAL_RCC_OscConfig+0x624>)
 8000f32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f34:	22f8      	movs	r2, #248	; 0xf8
 8000f36:	4393      	bics	r3, r2
 8000f38:	0019      	movs	r1, r3
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	699b      	ldr	r3, [r3, #24]
 8000f3e:	00da      	lsls	r2, r3, #3
 8000f40:	4b6d      	ldr	r3, [pc, #436]	; (80010f8 <HAL_RCC_OscConfig+0x624>)
 8000f42:	430a      	orrs	r2, r1
 8000f44:	635a      	str	r2, [r3, #52]	; 0x34
 8000f46:	e034      	b.n	8000fb2 <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	695b      	ldr	r3, [r3, #20]
 8000f4c:	3305      	adds	r3, #5
 8000f4e:	d111      	bne.n	8000f74 <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8000f50:	4b69      	ldr	r3, [pc, #420]	; (80010f8 <HAL_RCC_OscConfig+0x624>)
 8000f52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f54:	4b68      	ldr	r3, [pc, #416]	; (80010f8 <HAL_RCC_OscConfig+0x624>)
 8000f56:	2104      	movs	r1, #4
 8000f58:	438a      	bics	r2, r1
 8000f5a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000f5c:	4b66      	ldr	r3, [pc, #408]	; (80010f8 <HAL_RCC_OscConfig+0x624>)
 8000f5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f60:	22f8      	movs	r2, #248	; 0xf8
 8000f62:	4393      	bics	r3, r2
 8000f64:	0019      	movs	r1, r3
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	699b      	ldr	r3, [r3, #24]
 8000f6a:	00da      	lsls	r2, r3, #3
 8000f6c:	4b62      	ldr	r3, [pc, #392]	; (80010f8 <HAL_RCC_OscConfig+0x624>)
 8000f6e:	430a      	orrs	r2, r1
 8000f70:	635a      	str	r2, [r3, #52]	; 0x34
 8000f72:	e01e      	b.n	8000fb2 <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000f74:	4b60      	ldr	r3, [pc, #384]	; (80010f8 <HAL_RCC_OscConfig+0x624>)
 8000f76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f78:	4b5f      	ldr	r3, [pc, #380]	; (80010f8 <HAL_RCC_OscConfig+0x624>)
 8000f7a:	2104      	movs	r1, #4
 8000f7c:	430a      	orrs	r2, r1
 8000f7e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8000f80:	4b5d      	ldr	r3, [pc, #372]	; (80010f8 <HAL_RCC_OscConfig+0x624>)
 8000f82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f84:	4b5c      	ldr	r3, [pc, #368]	; (80010f8 <HAL_RCC_OscConfig+0x624>)
 8000f86:	2101      	movs	r1, #1
 8000f88:	438a      	bics	r2, r1
 8000f8a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f8c:	f7ff fb4a 	bl	8000624 <HAL_GetTick>
 8000f90:	0003      	movs	r3, r0
 8000f92:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000f94:	e008      	b.n	8000fa8 <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000f96:	f7ff fb45 	bl	8000624 <HAL_GetTick>
 8000f9a:	0002      	movs	r2, r0
 8000f9c:	69bb      	ldr	r3, [r7, #24]
 8000f9e:	1ad3      	subs	r3, r2, r3
 8000fa0:	2b02      	cmp	r3, #2
 8000fa2:	d901      	bls.n	8000fa8 <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 8000fa4:	2303      	movs	r3, #3
 8000fa6:	e0a2      	b.n	80010ee <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000fa8:	4b53      	ldr	r3, [pc, #332]	; (80010f8 <HAL_RCC_OscConfig+0x624>)
 8000faa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fac:	2202      	movs	r2, #2
 8000fae:	4013      	ands	r3, r2
 8000fb0:	d1f1      	bne.n	8000f96 <HAL_RCC_OscConfig+0x4c2>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6a1b      	ldr	r3, [r3, #32]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d100      	bne.n	8000fbc <HAL_RCC_OscConfig+0x4e8>
 8000fba:	e097      	b.n	80010ec <HAL_RCC_OscConfig+0x618>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000fbc:	4b4e      	ldr	r3, [pc, #312]	; (80010f8 <HAL_RCC_OscConfig+0x624>)
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	220c      	movs	r2, #12
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	2b08      	cmp	r3, #8
 8000fc6:	d100      	bne.n	8000fca <HAL_RCC_OscConfig+0x4f6>
 8000fc8:	e06b      	b.n	80010a2 <HAL_RCC_OscConfig+0x5ce>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6a1b      	ldr	r3, [r3, #32]
 8000fce:	2b02      	cmp	r3, #2
 8000fd0:	d14c      	bne.n	800106c <HAL_RCC_OscConfig+0x598>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fd2:	4b49      	ldr	r3, [pc, #292]	; (80010f8 <HAL_RCC_OscConfig+0x624>)
 8000fd4:	681a      	ldr	r2, [r3, #0]
 8000fd6:	4b48      	ldr	r3, [pc, #288]	; (80010f8 <HAL_RCC_OscConfig+0x624>)
 8000fd8:	494a      	ldr	r1, [pc, #296]	; (8001104 <HAL_RCC_OscConfig+0x630>)
 8000fda:	400a      	ands	r2, r1
 8000fdc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fde:	f7ff fb21 	bl	8000624 <HAL_GetTick>
 8000fe2:	0003      	movs	r3, r0
 8000fe4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fe6:	e008      	b.n	8000ffa <HAL_RCC_OscConfig+0x526>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fe8:	f7ff fb1c 	bl	8000624 <HAL_GetTick>
 8000fec:	0002      	movs	r2, r0
 8000fee:	69bb      	ldr	r3, [r7, #24]
 8000ff0:	1ad3      	subs	r3, r2, r3
 8000ff2:	2b02      	cmp	r3, #2
 8000ff4:	d901      	bls.n	8000ffa <HAL_RCC_OscConfig+0x526>
          {
            return HAL_TIMEOUT;
 8000ff6:	2303      	movs	r3, #3
 8000ff8:	e079      	b.n	80010ee <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ffa:	4b3f      	ldr	r3, [pc, #252]	; (80010f8 <HAL_RCC_OscConfig+0x624>)
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	2380      	movs	r3, #128	; 0x80
 8001000:	049b      	lsls	r3, r3, #18
 8001002:	4013      	ands	r3, r2
 8001004:	d1f0      	bne.n	8000fe8 <HAL_RCC_OscConfig+0x514>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001006:	4b3c      	ldr	r3, [pc, #240]	; (80010f8 <HAL_RCC_OscConfig+0x624>)
 8001008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800100a:	220f      	movs	r2, #15
 800100c:	4393      	bics	r3, r2
 800100e:	0019      	movs	r1, r3
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001014:	4b38      	ldr	r3, [pc, #224]	; (80010f8 <HAL_RCC_OscConfig+0x624>)
 8001016:	430a      	orrs	r2, r1
 8001018:	62da      	str	r2, [r3, #44]	; 0x2c
 800101a:	4b37      	ldr	r3, [pc, #220]	; (80010f8 <HAL_RCC_OscConfig+0x624>)
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	4a3a      	ldr	r2, [pc, #232]	; (8001108 <HAL_RCC_OscConfig+0x634>)
 8001020:	4013      	ands	r3, r2
 8001022:	0019      	movs	r1, r3
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800102c:	431a      	orrs	r2, r3
 800102e:	4b32      	ldr	r3, [pc, #200]	; (80010f8 <HAL_RCC_OscConfig+0x624>)
 8001030:	430a      	orrs	r2, r1
 8001032:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001034:	4b30      	ldr	r3, [pc, #192]	; (80010f8 <HAL_RCC_OscConfig+0x624>)
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	4b2f      	ldr	r3, [pc, #188]	; (80010f8 <HAL_RCC_OscConfig+0x624>)
 800103a:	2180      	movs	r1, #128	; 0x80
 800103c:	0449      	lsls	r1, r1, #17
 800103e:	430a      	orrs	r2, r1
 8001040:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001042:	f7ff faef 	bl	8000624 <HAL_GetTick>
 8001046:	0003      	movs	r3, r0
 8001048:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800104a:	e008      	b.n	800105e <HAL_RCC_OscConfig+0x58a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800104c:	f7ff faea 	bl	8000624 <HAL_GetTick>
 8001050:	0002      	movs	r2, r0
 8001052:	69bb      	ldr	r3, [r7, #24]
 8001054:	1ad3      	subs	r3, r2, r3
 8001056:	2b02      	cmp	r3, #2
 8001058:	d901      	bls.n	800105e <HAL_RCC_OscConfig+0x58a>
          {
            return HAL_TIMEOUT;
 800105a:	2303      	movs	r3, #3
 800105c:	e047      	b.n	80010ee <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800105e:	4b26      	ldr	r3, [pc, #152]	; (80010f8 <HAL_RCC_OscConfig+0x624>)
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	2380      	movs	r3, #128	; 0x80
 8001064:	049b      	lsls	r3, r3, #18
 8001066:	4013      	ands	r3, r2
 8001068:	d0f0      	beq.n	800104c <HAL_RCC_OscConfig+0x578>
 800106a:	e03f      	b.n	80010ec <HAL_RCC_OscConfig+0x618>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800106c:	4b22      	ldr	r3, [pc, #136]	; (80010f8 <HAL_RCC_OscConfig+0x624>)
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	4b21      	ldr	r3, [pc, #132]	; (80010f8 <HAL_RCC_OscConfig+0x624>)
 8001072:	4924      	ldr	r1, [pc, #144]	; (8001104 <HAL_RCC_OscConfig+0x630>)
 8001074:	400a      	ands	r2, r1
 8001076:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001078:	f7ff fad4 	bl	8000624 <HAL_GetTick>
 800107c:	0003      	movs	r3, r0
 800107e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001080:	e008      	b.n	8001094 <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001082:	f7ff facf 	bl	8000624 <HAL_GetTick>
 8001086:	0002      	movs	r2, r0
 8001088:	69bb      	ldr	r3, [r7, #24]
 800108a:	1ad3      	subs	r3, r2, r3
 800108c:	2b02      	cmp	r3, #2
 800108e:	d901      	bls.n	8001094 <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 8001090:	2303      	movs	r3, #3
 8001092:	e02c      	b.n	80010ee <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001094:	4b18      	ldr	r3, [pc, #96]	; (80010f8 <HAL_RCC_OscConfig+0x624>)
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	2380      	movs	r3, #128	; 0x80
 800109a:	049b      	lsls	r3, r3, #18
 800109c:	4013      	ands	r3, r2
 800109e:	d1f0      	bne.n	8001082 <HAL_RCC_OscConfig+0x5ae>
 80010a0:	e024      	b.n	80010ec <HAL_RCC_OscConfig+0x618>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6a1b      	ldr	r3, [r3, #32]
 80010a6:	2b01      	cmp	r3, #1
 80010a8:	d101      	bne.n	80010ae <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 80010aa:	2301      	movs	r3, #1
 80010ac:	e01f      	b.n	80010ee <HAL_RCC_OscConfig+0x61a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80010ae:	4b12      	ldr	r3, [pc, #72]	; (80010f8 <HAL_RCC_OscConfig+0x624>)
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80010b4:	4b10      	ldr	r3, [pc, #64]	; (80010f8 <HAL_RCC_OscConfig+0x624>)
 80010b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010b8:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80010ba:	697a      	ldr	r2, [r7, #20]
 80010bc:	2380      	movs	r3, #128	; 0x80
 80010be:	025b      	lsls	r3, r3, #9
 80010c0:	401a      	ands	r2, r3
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010c6:	429a      	cmp	r2, r3
 80010c8:	d10e      	bne.n	80010e8 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	220f      	movs	r2, #15
 80010ce:	401a      	ands	r2, r3
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80010d4:	429a      	cmp	r2, r3
 80010d6:	d107      	bne.n	80010e8 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80010d8:	697a      	ldr	r2, [r7, #20]
 80010da:	23f0      	movs	r3, #240	; 0xf0
 80010dc:	039b      	lsls	r3, r3, #14
 80010de:	401a      	ands	r2, r3
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80010e4:	429a      	cmp	r2, r3
 80010e6:	d001      	beq.n	80010ec <HAL_RCC_OscConfig+0x618>
        {
          return HAL_ERROR;
 80010e8:	2301      	movs	r3, #1
 80010ea:	e000      	b.n	80010ee <HAL_RCC_OscConfig+0x61a>
        }
      }
    }
  }

  return HAL_OK;
 80010ec:	2300      	movs	r3, #0
}
 80010ee:	0018      	movs	r0, r3
 80010f0:	46bd      	mov	sp, r7
 80010f2:	b008      	add	sp, #32
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	46c0      	nop			; (mov r8, r8)
 80010f8:	40021000 	.word	0x40021000
 80010fc:	00001388 	.word	0x00001388
 8001100:	efffffff 	.word	0xefffffff
 8001104:	feffffff 	.word	0xfeffffff
 8001108:	ffc2ffff 	.word	0xffc2ffff

0800110c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d101      	bne.n	8001120 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800111c:	2301      	movs	r3, #1
 800111e:	e0b3      	b.n	8001288 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001120:	4b5b      	ldr	r3, [pc, #364]	; (8001290 <HAL_RCC_ClockConfig+0x184>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	2201      	movs	r2, #1
 8001126:	4013      	ands	r3, r2
 8001128:	683a      	ldr	r2, [r7, #0]
 800112a:	429a      	cmp	r2, r3
 800112c:	d911      	bls.n	8001152 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800112e:	4b58      	ldr	r3, [pc, #352]	; (8001290 <HAL_RCC_ClockConfig+0x184>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	2201      	movs	r2, #1
 8001134:	4393      	bics	r3, r2
 8001136:	0019      	movs	r1, r3
 8001138:	4b55      	ldr	r3, [pc, #340]	; (8001290 <HAL_RCC_ClockConfig+0x184>)
 800113a:	683a      	ldr	r2, [r7, #0]
 800113c:	430a      	orrs	r2, r1
 800113e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001140:	4b53      	ldr	r3, [pc, #332]	; (8001290 <HAL_RCC_ClockConfig+0x184>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	2201      	movs	r2, #1
 8001146:	4013      	ands	r3, r2
 8001148:	683a      	ldr	r2, [r7, #0]
 800114a:	429a      	cmp	r2, r3
 800114c:	d001      	beq.n	8001152 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800114e:	2301      	movs	r3, #1
 8001150:	e09a      	b.n	8001288 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	2202      	movs	r2, #2
 8001158:	4013      	ands	r3, r2
 800115a:	d015      	beq.n	8001188 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	2204      	movs	r2, #4
 8001162:	4013      	ands	r3, r2
 8001164:	d006      	beq.n	8001174 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001166:	4b4b      	ldr	r3, [pc, #300]	; (8001294 <HAL_RCC_ClockConfig+0x188>)
 8001168:	685a      	ldr	r2, [r3, #4]
 800116a:	4b4a      	ldr	r3, [pc, #296]	; (8001294 <HAL_RCC_ClockConfig+0x188>)
 800116c:	21e0      	movs	r1, #224	; 0xe0
 800116e:	00c9      	lsls	r1, r1, #3
 8001170:	430a      	orrs	r2, r1
 8001172:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001174:	4b47      	ldr	r3, [pc, #284]	; (8001294 <HAL_RCC_ClockConfig+0x188>)
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	22f0      	movs	r2, #240	; 0xf0
 800117a:	4393      	bics	r3, r2
 800117c:	0019      	movs	r1, r3
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	689a      	ldr	r2, [r3, #8]
 8001182:	4b44      	ldr	r3, [pc, #272]	; (8001294 <HAL_RCC_ClockConfig+0x188>)
 8001184:	430a      	orrs	r2, r1
 8001186:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	2201      	movs	r2, #1
 800118e:	4013      	ands	r3, r2
 8001190:	d040      	beq.n	8001214 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	2b01      	cmp	r3, #1
 8001198:	d107      	bne.n	80011aa <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800119a:	4b3e      	ldr	r3, [pc, #248]	; (8001294 <HAL_RCC_ClockConfig+0x188>)
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	2380      	movs	r3, #128	; 0x80
 80011a0:	029b      	lsls	r3, r3, #10
 80011a2:	4013      	ands	r3, r2
 80011a4:	d114      	bne.n	80011d0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80011a6:	2301      	movs	r3, #1
 80011a8:	e06e      	b.n	8001288 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	2b02      	cmp	r3, #2
 80011b0:	d107      	bne.n	80011c2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011b2:	4b38      	ldr	r3, [pc, #224]	; (8001294 <HAL_RCC_ClockConfig+0x188>)
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	2380      	movs	r3, #128	; 0x80
 80011b8:	049b      	lsls	r3, r3, #18
 80011ba:	4013      	ands	r3, r2
 80011bc:	d108      	bne.n	80011d0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80011be:	2301      	movs	r3, #1
 80011c0:	e062      	b.n	8001288 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011c2:	4b34      	ldr	r3, [pc, #208]	; (8001294 <HAL_RCC_ClockConfig+0x188>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	2202      	movs	r2, #2
 80011c8:	4013      	ands	r3, r2
 80011ca:	d101      	bne.n	80011d0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80011cc:	2301      	movs	r3, #1
 80011ce:	e05b      	b.n	8001288 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011d0:	4b30      	ldr	r3, [pc, #192]	; (8001294 <HAL_RCC_ClockConfig+0x188>)
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	2203      	movs	r2, #3
 80011d6:	4393      	bics	r3, r2
 80011d8:	0019      	movs	r1, r3
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	685a      	ldr	r2, [r3, #4]
 80011de:	4b2d      	ldr	r3, [pc, #180]	; (8001294 <HAL_RCC_ClockConfig+0x188>)
 80011e0:	430a      	orrs	r2, r1
 80011e2:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80011e4:	f7ff fa1e 	bl	8000624 <HAL_GetTick>
 80011e8:	0003      	movs	r3, r0
 80011ea:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011ec:	e009      	b.n	8001202 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011ee:	f7ff fa19 	bl	8000624 <HAL_GetTick>
 80011f2:	0002      	movs	r2, r0
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	1ad3      	subs	r3, r2, r3
 80011f8:	4a27      	ldr	r2, [pc, #156]	; (8001298 <HAL_RCC_ClockConfig+0x18c>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d901      	bls.n	8001202 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80011fe:	2303      	movs	r3, #3
 8001200:	e042      	b.n	8001288 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001202:	4b24      	ldr	r3, [pc, #144]	; (8001294 <HAL_RCC_ClockConfig+0x188>)
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	220c      	movs	r2, #12
 8001208:	401a      	ands	r2, r3
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	009b      	lsls	r3, r3, #2
 8001210:	429a      	cmp	r2, r3
 8001212:	d1ec      	bne.n	80011ee <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001214:	4b1e      	ldr	r3, [pc, #120]	; (8001290 <HAL_RCC_ClockConfig+0x184>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	2201      	movs	r2, #1
 800121a:	4013      	ands	r3, r2
 800121c:	683a      	ldr	r2, [r7, #0]
 800121e:	429a      	cmp	r2, r3
 8001220:	d211      	bcs.n	8001246 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001222:	4b1b      	ldr	r3, [pc, #108]	; (8001290 <HAL_RCC_ClockConfig+0x184>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	2201      	movs	r2, #1
 8001228:	4393      	bics	r3, r2
 800122a:	0019      	movs	r1, r3
 800122c:	4b18      	ldr	r3, [pc, #96]	; (8001290 <HAL_RCC_ClockConfig+0x184>)
 800122e:	683a      	ldr	r2, [r7, #0]
 8001230:	430a      	orrs	r2, r1
 8001232:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001234:	4b16      	ldr	r3, [pc, #88]	; (8001290 <HAL_RCC_ClockConfig+0x184>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	2201      	movs	r2, #1
 800123a:	4013      	ands	r3, r2
 800123c:	683a      	ldr	r2, [r7, #0]
 800123e:	429a      	cmp	r2, r3
 8001240:	d001      	beq.n	8001246 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001242:	2301      	movs	r3, #1
 8001244:	e020      	b.n	8001288 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	2204      	movs	r2, #4
 800124c:	4013      	ands	r3, r2
 800124e:	d009      	beq.n	8001264 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001250:	4b10      	ldr	r3, [pc, #64]	; (8001294 <HAL_RCC_ClockConfig+0x188>)
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	4a11      	ldr	r2, [pc, #68]	; (800129c <HAL_RCC_ClockConfig+0x190>)
 8001256:	4013      	ands	r3, r2
 8001258:	0019      	movs	r1, r3
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	68da      	ldr	r2, [r3, #12]
 800125e:	4b0d      	ldr	r3, [pc, #52]	; (8001294 <HAL_RCC_ClockConfig+0x188>)
 8001260:	430a      	orrs	r2, r1
 8001262:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001264:	f000 f820 	bl	80012a8 <HAL_RCC_GetSysClockFreq>
 8001268:	0001      	movs	r1, r0
 800126a:	4b0a      	ldr	r3, [pc, #40]	; (8001294 <HAL_RCC_ClockConfig+0x188>)
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	091b      	lsrs	r3, r3, #4
 8001270:	220f      	movs	r2, #15
 8001272:	4013      	ands	r3, r2
 8001274:	4a0a      	ldr	r2, [pc, #40]	; (80012a0 <HAL_RCC_ClockConfig+0x194>)
 8001276:	5cd3      	ldrb	r3, [r2, r3]
 8001278:	000a      	movs	r2, r1
 800127a:	40da      	lsrs	r2, r3
 800127c:	4b09      	ldr	r3, [pc, #36]	; (80012a4 <HAL_RCC_ClockConfig+0x198>)
 800127e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001280:	2000      	movs	r0, #0
 8001282:	f7ff f989 	bl	8000598 <HAL_InitTick>
  
  return HAL_OK;
 8001286:	2300      	movs	r3, #0
}
 8001288:	0018      	movs	r0, r3
 800128a:	46bd      	mov	sp, r7
 800128c:	b004      	add	sp, #16
 800128e:	bd80      	pop	{r7, pc}
 8001290:	40022000 	.word	0x40022000
 8001294:	40021000 	.word	0x40021000
 8001298:	00001388 	.word	0x00001388
 800129c:	fffff8ff 	.word	0xfffff8ff
 80012a0:	080019f8 	.word	0x080019f8
 80012a4:	20000000 	.word	0x20000000

080012a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80012a8:	b590      	push	{r4, r7, lr}
 80012aa:	b08f      	sub	sp, #60	; 0x3c
 80012ac:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80012ae:	2314      	movs	r3, #20
 80012b0:	18fb      	adds	r3, r7, r3
 80012b2:	4a2b      	ldr	r2, [pc, #172]	; (8001360 <HAL_RCC_GetSysClockFreq+0xb8>)
 80012b4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80012b6:	c313      	stmia	r3!, {r0, r1, r4}
 80012b8:	6812      	ldr	r2, [r2, #0]
 80012ba:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80012bc:	1d3b      	adds	r3, r7, #4
 80012be:	4a29      	ldr	r2, [pc, #164]	; (8001364 <HAL_RCC_GetSysClockFreq+0xbc>)
 80012c0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80012c2:	c313      	stmia	r3!, {r0, r1, r4}
 80012c4:	6812      	ldr	r2, [r2, #0]
 80012c6:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80012c8:	2300      	movs	r3, #0
 80012ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012cc:	2300      	movs	r3, #0
 80012ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80012d0:	2300      	movs	r3, #0
 80012d2:	637b      	str	r3, [r7, #52]	; 0x34
 80012d4:	2300      	movs	r3, #0
 80012d6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80012d8:	2300      	movs	r3, #0
 80012da:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80012dc:	4b22      	ldr	r3, [pc, #136]	; (8001368 <HAL_RCC_GetSysClockFreq+0xc0>)
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80012e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012e4:	220c      	movs	r2, #12
 80012e6:	4013      	ands	r3, r2
 80012e8:	2b04      	cmp	r3, #4
 80012ea:	d002      	beq.n	80012f2 <HAL_RCC_GetSysClockFreq+0x4a>
 80012ec:	2b08      	cmp	r3, #8
 80012ee:	d003      	beq.n	80012f8 <HAL_RCC_GetSysClockFreq+0x50>
 80012f0:	e02d      	b.n	800134e <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80012f2:	4b1e      	ldr	r3, [pc, #120]	; (800136c <HAL_RCC_GetSysClockFreq+0xc4>)
 80012f4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80012f6:	e02d      	b.n	8001354 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80012f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012fa:	0c9b      	lsrs	r3, r3, #18
 80012fc:	220f      	movs	r2, #15
 80012fe:	4013      	ands	r3, r2
 8001300:	2214      	movs	r2, #20
 8001302:	18ba      	adds	r2, r7, r2
 8001304:	5cd3      	ldrb	r3, [r2, r3]
 8001306:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001308:	4b17      	ldr	r3, [pc, #92]	; (8001368 <HAL_RCC_GetSysClockFreq+0xc0>)
 800130a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800130c:	220f      	movs	r2, #15
 800130e:	4013      	ands	r3, r2
 8001310:	1d3a      	adds	r2, r7, #4
 8001312:	5cd3      	ldrb	r3, [r2, r3]
 8001314:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001316:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001318:	2380      	movs	r3, #128	; 0x80
 800131a:	025b      	lsls	r3, r3, #9
 800131c:	4013      	ands	r3, r2
 800131e:	d009      	beq.n	8001334 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001320:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001322:	4812      	ldr	r0, [pc, #72]	; (800136c <HAL_RCC_GetSysClockFreq+0xc4>)
 8001324:	f7fe fef0 	bl	8000108 <__udivsi3>
 8001328:	0003      	movs	r3, r0
 800132a:	001a      	movs	r2, r3
 800132c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800132e:	4353      	muls	r3, r2
 8001330:	637b      	str	r3, [r7, #52]	; 0x34
 8001332:	e009      	b.n	8001348 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001334:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001336:	000a      	movs	r2, r1
 8001338:	0152      	lsls	r2, r2, #5
 800133a:	1a52      	subs	r2, r2, r1
 800133c:	0193      	lsls	r3, r2, #6
 800133e:	1a9b      	subs	r3, r3, r2
 8001340:	00db      	lsls	r3, r3, #3
 8001342:	185b      	adds	r3, r3, r1
 8001344:	021b      	lsls	r3, r3, #8
 8001346:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8001348:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800134a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800134c:	e002      	b.n	8001354 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800134e:	4b07      	ldr	r3, [pc, #28]	; (800136c <HAL_RCC_GetSysClockFreq+0xc4>)
 8001350:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001352:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001356:	0018      	movs	r0, r3
 8001358:	46bd      	mov	sp, r7
 800135a:	b00f      	add	sp, #60	; 0x3c
 800135c:	bd90      	pop	{r4, r7, pc}
 800135e:	46c0      	nop			; (mov r8, r8)
 8001360:	080019d8 	.word	0x080019d8
 8001364:	080019e8 	.word	0x080019e8
 8001368:	40021000 	.word	0x40021000
 800136c:	007a1200 	.word	0x007a1200

08001370 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b086      	sub	sp, #24
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d101      	bne.n	8001384 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8001380:	2301      	movs	r3, #1
 8001382:	e07c      	b.n	800147e <HAL_TIM_Encoder_Init+0x10e>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	223d      	movs	r2, #61	; 0x3d
 8001388:	5c9b      	ldrb	r3, [r3, r2]
 800138a:	b2db      	uxtb	r3, r3
 800138c:	2b00      	cmp	r3, #0
 800138e:	d107      	bne.n	80013a0 <HAL_TIM_Encoder_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	223c      	movs	r2, #60	; 0x3c
 8001394:	2100      	movs	r1, #0
 8001396:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	0018      	movs	r0, r3
 800139c:	f7ff f840 	bl	8000420 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	223d      	movs	r2, #61	; 0x3d
 80013a4:	2102      	movs	r1, #2
 80013a6:	5499      	strb	r1, [r3, r2]

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	689a      	ldr	r2, [r3, #8]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4935      	ldr	r1, [pc, #212]	; (8001488 <HAL_TIM_Encoder_Init+0x118>)
 80013b4:	400a      	ands	r2, r1
 80013b6:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	3304      	adds	r3, #4
 80013c0:	0019      	movs	r1, r3
 80013c2:	0010      	movs	r0, r2
 80013c4:	f000 f9de 	bl	8001784 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	699b      	ldr	r3, [r3, #24]
 80013d6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	6a1b      	ldr	r3, [r3, #32]
 80013de:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	697a      	ldr	r2, [r7, #20]
 80013e6:	4313      	orrs	r3, r2
 80013e8:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	4a27      	ldr	r2, [pc, #156]	; (800148c <HAL_TIM_Encoder_Init+0x11c>)
 80013ee:	4013      	ands	r3, r2
 80013f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	689a      	ldr	r2, [r3, #8]
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	699b      	ldr	r3, [r3, #24]
 80013fa:	021b      	lsls	r3, r3, #8
 80013fc:	4313      	orrs	r3, r2
 80013fe:	693a      	ldr	r2, [r7, #16]
 8001400:	4313      	orrs	r3, r2
 8001402:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	4a22      	ldr	r2, [pc, #136]	; (8001490 <HAL_TIM_Encoder_Init+0x120>)
 8001408:	4013      	ands	r3, r2
 800140a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	4a21      	ldr	r2, [pc, #132]	; (8001494 <HAL_TIM_Encoder_Init+0x124>)
 8001410:	4013      	ands	r3, r2
 8001412:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	68da      	ldr	r2, [r3, #12]
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	69db      	ldr	r3, [r3, #28]
 800141c:	021b      	lsls	r3, r3, #8
 800141e:	4313      	orrs	r3, r2
 8001420:	693a      	ldr	r2, [r7, #16]
 8001422:	4313      	orrs	r3, r2
 8001424:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	691b      	ldr	r3, [r3, #16]
 800142a:	011a      	lsls	r2, r3, #4
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	6a1b      	ldr	r3, [r3, #32]
 8001430:	031b      	lsls	r3, r3, #12
 8001432:	4313      	orrs	r3, r2
 8001434:	693a      	ldr	r2, [r7, #16]
 8001436:	4313      	orrs	r3, r2
 8001438:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	2222      	movs	r2, #34	; 0x22
 800143e:	4393      	bics	r3, r2
 8001440:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	2288      	movs	r2, #136	; 0x88
 8001446:	4393      	bics	r3, r2
 8001448:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	685a      	ldr	r2, [r3, #4]
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	695b      	ldr	r3, [r3, #20]
 8001452:	011b      	lsls	r3, r3, #4
 8001454:	4313      	orrs	r3, r2
 8001456:	68fa      	ldr	r2, [r7, #12]
 8001458:	4313      	orrs	r3, r2
 800145a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	697a      	ldr	r2, [r7, #20]
 8001462:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	693a      	ldr	r2, [r7, #16]
 800146a:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	68fa      	ldr	r2, [r7, #12]
 8001472:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	223d      	movs	r2, #61	; 0x3d
 8001478:	2101      	movs	r1, #1
 800147a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800147c:	2300      	movs	r3, #0
}
 800147e:	0018      	movs	r0, r3
 8001480:	46bd      	mov	sp, r7
 8001482:	b006      	add	sp, #24
 8001484:	bd80      	pop	{r7, pc}
 8001486:	46c0      	nop			; (mov r8, r8)
 8001488:	ffffbff8 	.word	0xffffbff8
 800148c:	fffffcfc 	.word	0xfffffcfc
 8001490:	fffff3f3 	.word	0xfffff3f3
 8001494:	ffff0f0f 	.word	0xffff0f0f

08001498 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d002      	beq.n	80014ae <HAL_TIM_Encoder_Start+0x16>
 80014a8:	2b04      	cmp	r3, #4
 80014aa:	d008      	beq.n	80014be <HAL_TIM_Encoder_Start+0x26>
 80014ac:	e00f      	b.n	80014ce <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	2201      	movs	r2, #1
 80014b4:	2100      	movs	r1, #0
 80014b6:	0018      	movs	r0, r3
 80014b8:	f000 f9d0 	bl	800185c <TIM_CCxChannelCmd>
      break;
 80014bc:	e016      	b.n	80014ec <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	2201      	movs	r2, #1
 80014c4:	2104      	movs	r1, #4
 80014c6:	0018      	movs	r0, r3
 80014c8:	f000 f9c8 	bl	800185c <TIM_CCxChannelCmd>
      break;
 80014cc:	e00e      	b.n	80014ec <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	2201      	movs	r2, #1
 80014d4:	2100      	movs	r1, #0
 80014d6:	0018      	movs	r0, r3
 80014d8:	f000 f9c0 	bl	800185c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	2201      	movs	r2, #1
 80014e2:	2104      	movs	r1, #4
 80014e4:	0018      	movs	r0, r3
 80014e6:	f000 f9b9 	bl	800185c <TIM_CCxChannelCmd>
      break;
 80014ea:	46c0      	nop			; (mov r8, r8)
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	2101      	movs	r1, #1
 80014f8:	430a      	orrs	r2, r1
 80014fa:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80014fc:	2300      	movs	r3, #0
}
 80014fe:	0018      	movs	r0, r3
 8001500:	46bd      	mov	sp, r7
 8001502:	b002      	add	sp, #8
 8001504:	bd80      	pop	{r7, pc}

08001506 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001506:	b580      	push	{r7, lr}
 8001508:	b082      	sub	sp, #8
 800150a:	af00      	add	r7, sp, #0
 800150c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	691b      	ldr	r3, [r3, #16]
 8001514:	2202      	movs	r2, #2
 8001516:	4013      	ands	r3, r2
 8001518:	2b02      	cmp	r3, #2
 800151a:	d124      	bne.n	8001566 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	68db      	ldr	r3, [r3, #12]
 8001522:	2202      	movs	r2, #2
 8001524:	4013      	ands	r3, r2
 8001526:	2b02      	cmp	r3, #2
 8001528:	d11d      	bne.n	8001566 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	2203      	movs	r2, #3
 8001530:	4252      	negs	r2, r2
 8001532:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2201      	movs	r2, #1
 8001538:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	699b      	ldr	r3, [r3, #24]
 8001540:	2203      	movs	r2, #3
 8001542:	4013      	ands	r3, r2
 8001544:	d004      	beq.n	8001550 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	0018      	movs	r0, r3
 800154a:	f000 f902 	bl	8001752 <HAL_TIM_IC_CaptureCallback>
 800154e:	e007      	b.n	8001560 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	0018      	movs	r0, r3
 8001554:	f000 f8f5 	bl	8001742 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	0018      	movs	r0, r3
 800155c:	f000 f901 	bl	8001762 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2200      	movs	r2, #0
 8001564:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	691b      	ldr	r3, [r3, #16]
 800156c:	2204      	movs	r2, #4
 800156e:	4013      	ands	r3, r2
 8001570:	2b04      	cmp	r3, #4
 8001572:	d125      	bne.n	80015c0 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	68db      	ldr	r3, [r3, #12]
 800157a:	2204      	movs	r2, #4
 800157c:	4013      	ands	r3, r2
 800157e:	2b04      	cmp	r3, #4
 8001580:	d11e      	bne.n	80015c0 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	2205      	movs	r2, #5
 8001588:	4252      	negs	r2, r2
 800158a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2202      	movs	r2, #2
 8001590:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	699a      	ldr	r2, [r3, #24]
 8001598:	23c0      	movs	r3, #192	; 0xc0
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	4013      	ands	r3, r2
 800159e:	d004      	beq.n	80015aa <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	0018      	movs	r0, r3
 80015a4:	f000 f8d5 	bl	8001752 <HAL_TIM_IC_CaptureCallback>
 80015a8:	e007      	b.n	80015ba <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	0018      	movs	r0, r3
 80015ae:	f000 f8c8 	bl	8001742 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	0018      	movs	r0, r3
 80015b6:	f000 f8d4 	bl	8001762 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2200      	movs	r2, #0
 80015be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	691b      	ldr	r3, [r3, #16]
 80015c6:	2208      	movs	r2, #8
 80015c8:	4013      	ands	r3, r2
 80015ca:	2b08      	cmp	r3, #8
 80015cc:	d124      	bne.n	8001618 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	2208      	movs	r2, #8
 80015d6:	4013      	ands	r3, r2
 80015d8:	2b08      	cmp	r3, #8
 80015da:	d11d      	bne.n	8001618 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	2209      	movs	r2, #9
 80015e2:	4252      	negs	r2, r2
 80015e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2204      	movs	r2, #4
 80015ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	69db      	ldr	r3, [r3, #28]
 80015f2:	2203      	movs	r2, #3
 80015f4:	4013      	ands	r3, r2
 80015f6:	d004      	beq.n	8001602 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	0018      	movs	r0, r3
 80015fc:	f000 f8a9 	bl	8001752 <HAL_TIM_IC_CaptureCallback>
 8001600:	e007      	b.n	8001612 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	0018      	movs	r0, r3
 8001606:	f000 f89c 	bl	8001742 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	0018      	movs	r0, r3
 800160e:	f000 f8a8 	bl	8001762 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2200      	movs	r2, #0
 8001616:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	691b      	ldr	r3, [r3, #16]
 800161e:	2210      	movs	r2, #16
 8001620:	4013      	ands	r3, r2
 8001622:	2b10      	cmp	r3, #16
 8001624:	d125      	bne.n	8001672 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	68db      	ldr	r3, [r3, #12]
 800162c:	2210      	movs	r2, #16
 800162e:	4013      	ands	r3, r2
 8001630:	2b10      	cmp	r3, #16
 8001632:	d11e      	bne.n	8001672 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	2211      	movs	r2, #17
 800163a:	4252      	negs	r2, r2
 800163c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2208      	movs	r2, #8
 8001642:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	69da      	ldr	r2, [r3, #28]
 800164a:	23c0      	movs	r3, #192	; 0xc0
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	4013      	ands	r3, r2
 8001650:	d004      	beq.n	800165c <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	0018      	movs	r0, r3
 8001656:	f000 f87c 	bl	8001752 <HAL_TIM_IC_CaptureCallback>
 800165a:	e007      	b.n	800166c <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	0018      	movs	r0, r3
 8001660:	f000 f86f 	bl	8001742 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	0018      	movs	r0, r3
 8001668:	f000 f87b 	bl	8001762 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2200      	movs	r2, #0
 8001670:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	691b      	ldr	r3, [r3, #16]
 8001678:	2201      	movs	r2, #1
 800167a:	4013      	ands	r3, r2
 800167c:	2b01      	cmp	r3, #1
 800167e:	d10f      	bne.n	80016a0 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	68db      	ldr	r3, [r3, #12]
 8001686:	2201      	movs	r2, #1
 8001688:	4013      	ands	r3, r2
 800168a:	2b01      	cmp	r3, #1
 800168c:	d108      	bne.n	80016a0 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	2202      	movs	r2, #2
 8001694:	4252      	negs	r2, r2
 8001696:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	0018      	movs	r0, r3
 800169c:	f000 f849 	bl	8001732 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	691b      	ldr	r3, [r3, #16]
 80016a6:	2280      	movs	r2, #128	; 0x80
 80016a8:	4013      	ands	r3, r2
 80016aa:	2b80      	cmp	r3, #128	; 0x80
 80016ac:	d10f      	bne.n	80016ce <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	2280      	movs	r2, #128	; 0x80
 80016b6:	4013      	ands	r3, r2
 80016b8:	2b80      	cmp	r3, #128	; 0x80
 80016ba:	d108      	bne.n	80016ce <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	2281      	movs	r2, #129	; 0x81
 80016c2:	4252      	negs	r2, r2
 80016c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	0018      	movs	r0, r3
 80016ca:	f000 f945 	bl	8001958 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	691b      	ldr	r3, [r3, #16]
 80016d4:	2240      	movs	r2, #64	; 0x40
 80016d6:	4013      	ands	r3, r2
 80016d8:	2b40      	cmp	r3, #64	; 0x40
 80016da:	d10f      	bne.n	80016fc <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	68db      	ldr	r3, [r3, #12]
 80016e2:	2240      	movs	r2, #64	; 0x40
 80016e4:	4013      	ands	r3, r2
 80016e6:	2b40      	cmp	r3, #64	; 0x40
 80016e8:	d108      	bne.n	80016fc <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	2241      	movs	r2, #65	; 0x41
 80016f0:	4252      	negs	r2, r2
 80016f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	0018      	movs	r0, r3
 80016f8:	f000 f83b 	bl	8001772 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	691b      	ldr	r3, [r3, #16]
 8001702:	2220      	movs	r2, #32
 8001704:	4013      	ands	r3, r2
 8001706:	2b20      	cmp	r3, #32
 8001708:	d10f      	bne.n	800172a <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	2220      	movs	r2, #32
 8001712:	4013      	ands	r3, r2
 8001714:	2b20      	cmp	r3, #32
 8001716:	d108      	bne.n	800172a <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	2221      	movs	r2, #33	; 0x21
 800171e:	4252      	negs	r2, r2
 8001720:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	0018      	movs	r0, r3
 8001726:	f000 f90f 	bl	8001948 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800172a:	46c0      	nop			; (mov r8, r8)
 800172c:	46bd      	mov	sp, r7
 800172e:	b002      	add	sp, #8
 8001730:	bd80      	pop	{r7, pc}

08001732 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001732:	b580      	push	{r7, lr}
 8001734:	b082      	sub	sp, #8
 8001736:	af00      	add	r7, sp, #0
 8001738:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800173a:	46c0      	nop			; (mov r8, r8)
 800173c:	46bd      	mov	sp, r7
 800173e:	b002      	add	sp, #8
 8001740:	bd80      	pop	{r7, pc}

08001742 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001742:	b580      	push	{r7, lr}
 8001744:	b082      	sub	sp, #8
 8001746:	af00      	add	r7, sp, #0
 8001748:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800174a:	46c0      	nop			; (mov r8, r8)
 800174c:	46bd      	mov	sp, r7
 800174e:	b002      	add	sp, #8
 8001750:	bd80      	pop	{r7, pc}

08001752 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001752:	b580      	push	{r7, lr}
 8001754:	b082      	sub	sp, #8
 8001756:	af00      	add	r7, sp, #0
 8001758:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800175a:	46c0      	nop			; (mov r8, r8)
 800175c:	46bd      	mov	sp, r7
 800175e:	b002      	add	sp, #8
 8001760:	bd80      	pop	{r7, pc}

08001762 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001762:	b580      	push	{r7, lr}
 8001764:	b082      	sub	sp, #8
 8001766:	af00      	add	r7, sp, #0
 8001768:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800176a:	46c0      	nop			; (mov r8, r8)
 800176c:	46bd      	mov	sp, r7
 800176e:	b002      	add	sp, #8
 8001770:	bd80      	pop	{r7, pc}

08001772 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001772:	b580      	push	{r7, lr}
 8001774:	b082      	sub	sp, #8
 8001776:	af00      	add	r7, sp, #0
 8001778:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800177a:	46c0      	nop			; (mov r8, r8)
 800177c:	46bd      	mov	sp, r7
 800177e:	b002      	add	sp, #8
 8001780:	bd80      	pop	{r7, pc}
	...

08001784 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b084      	sub	sp, #16
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
 800178c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	4a2b      	ldr	r2, [pc, #172]	; (8001844 <TIM_Base_SetConfig+0xc0>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d003      	beq.n	80017a4 <TIM_Base_SetConfig+0x20>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	4a2a      	ldr	r2, [pc, #168]	; (8001848 <TIM_Base_SetConfig+0xc4>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d108      	bne.n	80017b6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	2270      	movs	r2, #112	; 0x70
 80017a8:	4393      	bics	r3, r2
 80017aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	68fa      	ldr	r2, [r7, #12]
 80017b2:	4313      	orrs	r3, r2
 80017b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4a22      	ldr	r2, [pc, #136]	; (8001844 <TIM_Base_SetConfig+0xc0>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d00f      	beq.n	80017de <TIM_Base_SetConfig+0x5a>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	4a21      	ldr	r2, [pc, #132]	; (8001848 <TIM_Base_SetConfig+0xc4>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d00b      	beq.n	80017de <TIM_Base_SetConfig+0x5a>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4a20      	ldr	r2, [pc, #128]	; (800184c <TIM_Base_SetConfig+0xc8>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d007      	beq.n	80017de <TIM_Base_SetConfig+0x5a>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	4a1f      	ldr	r2, [pc, #124]	; (8001850 <TIM_Base_SetConfig+0xcc>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d003      	beq.n	80017de <TIM_Base_SetConfig+0x5a>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4a1e      	ldr	r2, [pc, #120]	; (8001854 <TIM_Base_SetConfig+0xd0>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d108      	bne.n	80017f0 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	4a1d      	ldr	r2, [pc, #116]	; (8001858 <TIM_Base_SetConfig+0xd4>)
 80017e2:	4013      	ands	r3, r2
 80017e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	68db      	ldr	r3, [r3, #12]
 80017ea:	68fa      	ldr	r2, [r7, #12]
 80017ec:	4313      	orrs	r3, r2
 80017ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	2280      	movs	r2, #128	; 0x80
 80017f4:	4393      	bics	r3, r2
 80017f6:	001a      	movs	r2, r3
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	695b      	ldr	r3, [r3, #20]
 80017fc:	4313      	orrs	r3, r2
 80017fe:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	68fa      	ldr	r2, [r7, #12]
 8001804:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	689a      	ldr	r2, [r3, #8]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4a0a      	ldr	r2, [pc, #40]	; (8001844 <TIM_Base_SetConfig+0xc0>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d007      	beq.n	800182e <TIM_Base_SetConfig+0xaa>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4a0b      	ldr	r2, [pc, #44]	; (8001850 <TIM_Base_SetConfig+0xcc>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d003      	beq.n	800182e <TIM_Base_SetConfig+0xaa>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4a0a      	ldr	r2, [pc, #40]	; (8001854 <TIM_Base_SetConfig+0xd0>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d103      	bne.n	8001836 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	691a      	ldr	r2, [r3, #16]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2201      	movs	r2, #1
 800183a:	615a      	str	r2, [r3, #20]
}
 800183c:	46c0      	nop			; (mov r8, r8)
 800183e:	46bd      	mov	sp, r7
 8001840:	b004      	add	sp, #16
 8001842:	bd80      	pop	{r7, pc}
 8001844:	40012c00 	.word	0x40012c00
 8001848:	40000400 	.word	0x40000400
 800184c:	40002000 	.word	0x40002000
 8001850:	40014400 	.word	0x40014400
 8001854:	40014800 	.word	0x40014800
 8001858:	fffffcff 	.word	0xfffffcff

0800185c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b086      	sub	sp, #24
 8001860:	af00      	add	r7, sp, #0
 8001862:	60f8      	str	r0, [r7, #12]
 8001864:	60b9      	str	r1, [r7, #8]
 8001866:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	221f      	movs	r2, #31
 800186c:	4013      	ands	r3, r2
 800186e:	2201      	movs	r2, #1
 8001870:	409a      	lsls	r2, r3
 8001872:	0013      	movs	r3, r2
 8001874:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	6a1b      	ldr	r3, [r3, #32]
 800187a:	697a      	ldr	r2, [r7, #20]
 800187c:	43d2      	mvns	r2, r2
 800187e:	401a      	ands	r2, r3
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	6a1a      	ldr	r2, [r3, #32]
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	211f      	movs	r1, #31
 800188c:	400b      	ands	r3, r1
 800188e:	6879      	ldr	r1, [r7, #4]
 8001890:	4099      	lsls	r1, r3
 8001892:	000b      	movs	r3, r1
 8001894:	431a      	orrs	r2, r3
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	621a      	str	r2, [r3, #32]
}
 800189a:	46c0      	nop			; (mov r8, r8)
 800189c:	46bd      	mov	sp, r7
 800189e:	b006      	add	sp, #24
 80018a0:	bd80      	pop	{r7, pc}
	...

080018a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b084      	sub	sp, #16
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	223c      	movs	r2, #60	; 0x3c
 80018b2:	5c9b      	ldrb	r3, [r3, r2]
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d101      	bne.n	80018bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80018b8:	2302      	movs	r3, #2
 80018ba:	e03c      	b.n	8001936 <HAL_TIMEx_MasterConfigSynchronization+0x92>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	223c      	movs	r2, #60	; 0x3c
 80018c0:	2101      	movs	r1, #1
 80018c2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	223d      	movs	r2, #61	; 0x3d
 80018c8:	2102      	movs	r1, #2
 80018ca:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	2270      	movs	r2, #112	; 0x70
 80018e0:	4393      	bics	r3, r2
 80018e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	68fa      	ldr	r2, [r7, #12]
 80018ea:	4313      	orrs	r3, r2
 80018ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	68fa      	ldr	r2, [r7, #12]
 80018f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a11      	ldr	r2, [pc, #68]	; (8001940 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d004      	beq.n	800190a <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a0f      	ldr	r2, [pc, #60]	; (8001944 <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d10c      	bne.n	8001924 <HAL_TIMEx_MasterConfigSynchronization+0x80>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	2280      	movs	r2, #128	; 0x80
 800190e:	4393      	bics	r3, r2
 8001910:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	68ba      	ldr	r2, [r7, #8]
 8001918:	4313      	orrs	r3, r2
 800191a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	68ba      	ldr	r2, [r7, #8]
 8001922:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	223d      	movs	r2, #61	; 0x3d
 8001928:	2101      	movs	r1, #1
 800192a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	223c      	movs	r2, #60	; 0x3c
 8001930:	2100      	movs	r1, #0
 8001932:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001934:	2300      	movs	r3, #0
}
 8001936:	0018      	movs	r0, r3
 8001938:	46bd      	mov	sp, r7
 800193a:	b004      	add	sp, #16
 800193c:	bd80      	pop	{r7, pc}
 800193e:	46c0      	nop			; (mov r8, r8)
 8001940:	40012c00 	.word	0x40012c00
 8001944:	40000400 	.word	0x40000400

08001948 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001950:	46c0      	nop			; (mov r8, r8)
 8001952:	46bd      	mov	sp, r7
 8001954:	b002      	add	sp, #8
 8001956:	bd80      	pop	{r7, pc}

08001958 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001960:	46c0      	nop			; (mov r8, r8)
 8001962:	46bd      	mov	sp, r7
 8001964:	b002      	add	sp, #8
 8001966:	bd80      	pop	{r7, pc}

08001968 <__libc_init_array>:
 8001968:	b570      	push	{r4, r5, r6, lr}
 800196a:	2600      	movs	r6, #0
 800196c:	4d0c      	ldr	r5, [pc, #48]	; (80019a0 <__libc_init_array+0x38>)
 800196e:	4c0d      	ldr	r4, [pc, #52]	; (80019a4 <__libc_init_array+0x3c>)
 8001970:	1b64      	subs	r4, r4, r5
 8001972:	10a4      	asrs	r4, r4, #2
 8001974:	42a6      	cmp	r6, r4
 8001976:	d109      	bne.n	800198c <__libc_init_array+0x24>
 8001978:	2600      	movs	r6, #0
 800197a:	f000 f821 	bl	80019c0 <_init>
 800197e:	4d0a      	ldr	r5, [pc, #40]	; (80019a8 <__libc_init_array+0x40>)
 8001980:	4c0a      	ldr	r4, [pc, #40]	; (80019ac <__libc_init_array+0x44>)
 8001982:	1b64      	subs	r4, r4, r5
 8001984:	10a4      	asrs	r4, r4, #2
 8001986:	42a6      	cmp	r6, r4
 8001988:	d105      	bne.n	8001996 <__libc_init_array+0x2e>
 800198a:	bd70      	pop	{r4, r5, r6, pc}
 800198c:	00b3      	lsls	r3, r6, #2
 800198e:	58eb      	ldr	r3, [r5, r3]
 8001990:	4798      	blx	r3
 8001992:	3601      	adds	r6, #1
 8001994:	e7ee      	b.n	8001974 <__libc_init_array+0xc>
 8001996:	00b3      	lsls	r3, r6, #2
 8001998:	58eb      	ldr	r3, [r5, r3]
 800199a:	4798      	blx	r3
 800199c:	3601      	adds	r6, #1
 800199e:	e7f2      	b.n	8001986 <__libc_init_array+0x1e>
 80019a0:	08001a08 	.word	0x08001a08
 80019a4:	08001a08 	.word	0x08001a08
 80019a8:	08001a08 	.word	0x08001a08
 80019ac:	08001a0c 	.word	0x08001a0c

080019b0 <memset>:
 80019b0:	0003      	movs	r3, r0
 80019b2:	1812      	adds	r2, r2, r0
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d100      	bne.n	80019ba <memset+0xa>
 80019b8:	4770      	bx	lr
 80019ba:	7019      	strb	r1, [r3, #0]
 80019bc:	3301      	adds	r3, #1
 80019be:	e7f9      	b.n	80019b4 <memset+0x4>

080019c0 <_init>:
 80019c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019c2:	46c0      	nop			; (mov r8, r8)
 80019c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80019c6:	bc08      	pop	{r3}
 80019c8:	469e      	mov	lr, r3
 80019ca:	4770      	bx	lr

080019cc <_fini>:
 80019cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019ce:	46c0      	nop			; (mov r8, r8)
 80019d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80019d2:	bc08      	pop	{r3}
 80019d4:	469e      	mov	lr, r3
 80019d6:	4770      	bx	lr
